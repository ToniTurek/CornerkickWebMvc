@model CornerkickWebMvc.Models.StadionModel

@{
  ViewBag.Title = "Stadion";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<!doctype html>
<html lang="en">
<head>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script type="text/javascript" src="~/Scripts/jquery-2.0.0.min.js"></script>
  <script type="text/javascript" src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
  <script type="text/javascript" src="~/Scripts/dialog.js"></script>
  <script type="text/javascript" src="~/Scripts/Finance.js"></script>

  <style>
    .ui-widget-header {
      background: lime;
    }

    .ui-progressbar {
      position: relative;
      height: 14px;
      display: none;
    }

    .progress-label {
      position: absolute;
      left: 50%;
      top: -4px;
      text-shadow: 1px 1px 0 #fff;
    }

    .myPb {
      height: 14px;
      background-color: lime;
      text-align: center; /* To center it horizontally (if you want) */
      line-height: 14px; /* To center it vertically */
      color: black;
      text-shadow: 1px 1px 0 #DCDCDC;
      -webkit-border-radius: 3px;
    }
  </style>

  <script type="text/javascript">
    function setName() {
      var sNewName = $("#sName").val();
      $.ajax({
        url: '/Member/StadiumSetName',
        type: "GET",
        dataType: "JSON",
        data: { sName: sNewName }
      });
    }

    var ltBlocks = [];
    var bTopring = false;
    var bSound = true;
    $(document).ready(function () {
      bSound = @Html.Raw(Json.Encode(Model.bSound));

      var bnBuild = document.getElementById("bnBuild");
      bnBuild.disabled = true;

      var bnBuildTopring = document.getElementById("bnBuildTopring");
      bnBuildTopring.disabled = true;

      var bnRenewPitch = document.getElementById("bnRenewPitch");
      bnRenewPitch.disabled = true;

      var pbVideo = $("#pbVideo");
      var plVideo = $("#plVideo");
      pbVideo.progressbar({
        value: false,
        change: function () {
          plVideo.text(pbVideo.progressbar("value") + "%");
        }
      });

      var pbSnackbar = $("#pbSnackbar");
      var plSnackbar = $("#plSnackbar");
      pbSnackbar.progressbar({
        value: false,
        change: function () {
          plSnackbar.text(pbSnackbar.progressbar("value") + "%");
        }
      });

      var pbToilets = $("#pbToilets");
      var plToilets = $("#plToilets");
      pbToilets.progressbar({
        value: false,
        change: function () {
          plToilets.text(pbToilets.progressbar("value") + "%");
        }
      });

      setImage();

      ltBlocks = @Html.Raw(Json.Encode(Model.stadion.blocks));
      bTopring = @Html.Raw(Json.Encode(Model.stadion.bTopring && Model.stadion.iTopringDaysConstruct == 0));

      drawSeats(ltBlocks, bTopring, -1);
      getTopring();
      getExtras();
      getVideoCost();
      getSnackbarCost();
      getToiletsCost();
      getRenewPitchCostDays();
      drawPitchQuality();

      $("#tbSnackbar").on('keyup', function (ev) {
        getSnackbarCost();
      });
      $("#tbSnackbar").on('change', function (ev) {
        getSnackbarCost();
      });

      $("#tbToilets").on('keyup', function (ev) {
        getToiletsCost();
      });
      $("#tbToilets").on('change', function (ev) {
        getToiletsCost();
      });

      bnBuild.addEventListener("click", function () {
        var iBlock = bnBuild.getAttribute('data-iBlock');
        var iSeats = bnBuild.getAttribute('data-iSeats');
        var iType = bnBuild.getAttribute('data-iType');
        var iCost = parseInt(bnBuild.getAttribute('data-sCost'));
        var sDur = bnBuild.getAttribute('data-sDur');

        var sDesc = "Wollen Sie das Stadion für " + iCost.toLocaleString() + "€ wirklich ausbauen?<br>Der Ausbau würde " + sDur + " Tage dauern.";
        getDialog(document.body, sDesc, "Stadionausbau", function () { buildBlock(iBlock, iSeats, iType); });
      });

      bnBuildTopring.addEventListener("click", function () {
        $.ajax({
          url: '/Member/StadiumGetMaxSeats',
          dataType: "JSON",
          success: function (iSeatsMax) {
            var sCost = bnBuildTopring.getAttribute('data-sCost');
            var sDur  = bnBuildTopring.getAttribute('data-sDur');
            getDialog(document.body, "Wollen Sie wirklich für " + sCost + " einen Oberring bauen? Der Ausbau würde " + sDur + " Tage dauern.<br><br>Die unteren Blöcke könnten dann nur noch bis maximal:<br>&emsp;" + iSeatsMax[0].toLocaleString() + " (Steh)<br>&emsp;" + iSeatsMax[1].toLocaleString() + " (Sitz)<br>&emsp;" + iSeatsMax[2].toLocaleString() + " (VIP)<br> ausgebaut werden.", "Stadionausbau", buildTopring);
          }
        });
      });

      $("#bnBuildVideo").click(function () {
        buildVideo();
      });

      $("#bnBuildSnackbar").click(function () {
        buildSnackbar();
      });

      $("#bnBuildToilets").click(function () {
        buildToilets();
      });

      bnRenewPitch.addEventListener("click", function () {
        $.when(getBalanceAjax()).done(function (iBalance) {
          $.ajax({
            url: '/Member/StadiumRenewPitch',
            dataType: "JSON",
            success: function (sMessage) {
              drawPitchQuality();
              getRenewPitchCostDays();
              updateBalance(iBalance[0]);

              alert(sMessage);
            }
          });
        });
      });

      let sctBuildBlocks = document.getElementById("sctBuildBlocks");
      sctBuildBlocks.disabled = true;
      $.each(ltBlocks, function (i, block) {
        if (!bTopring && i > 9) {
          return false;
        }

        if (block.iSeatsDaysConstruct === 0) {
          var optBlock = document.createElement("option");
          optBlock.value = i;
          optBlock.text = block.sName;
          sctBuildBlocks.appendChild(optBlock);
        }
      });
      sctBuildBlocks.addEventListener("change", function () {
        drawSeats(ltBlocks, bTopring, parseInt(this.value));
      });

      var cbBuildBlocks = document.getElementById("cbBuildBlocks");
      cbBuildBlocks.checked = false;
      cbBuildBlocks.addEventListener("change", function () {
        sctBuildBlocks.disabled = !this.checked;

        drawSeats(ltBlocks, bTopring, this.checked ? parseInt(sctBuildBlocks.value) : -1);
      });

      /*
      $(window).resize(function () {
        if (cbBuildBlocks.checked) {
          drawSeats(ltBlocks, bTopring, parseInt(sctBuildBlocks.value));
        }
      });
      */
    }); // document ready

    function setImage() {
      $.ajax({
        url: '/Member/StadiumGetTopring',
        dataType: "JSON",
        success: function (bTopring) {
          if (bTopring) {
            document.getElementById("imgStadium").src = "/Content/Images/stadium/stadion_L.jpg";
            document.getElementById("divTopring").style.display = "none";
          } else {
            document.getElementById("imgStadium").src = "/Content/Images/stadium/stadion_S.png";
          }
        }
      });
    }

    function getStadiumBuildBlock(iBlock, iSeats, iType) {
      if (!e) var e = window.event;
      e.cancelBubble = true;
      if (e.stopPropagation) e.stopPropagation();

      $.ajax({
        url: '/Member/StadiumGetBuildCost',
        dataType: "JSON",
        data: { iBlock: iBlock, iSeats: iSeats, iType: iType },
        success: function (iCostDaysDispo) {
          bnBuild = document.getElementById("bnBuild");

          if (typeof iCostDaysDispo === 'number') {
            bnBuild.innerHTML = "Maximale Anzahl Plätze: " + iCostDaysDispo.toLocaleString();
            bnBuild.disabled = true;
          } else {
            bnBuild.setAttribute('data-iBlock', iBlock);
            bnBuild.setAttribute('data-iSeats', iSeats);
            bnBuild.setAttribute('data-iType', iType);
            bnBuild.setAttribute('data-sCost', iCostDaysDispo[0]);
            bnBuild.setAttribute('data-sDur', iCostDaysDispo[1]);
            bnBuild.innerText = "Kosten: " + iCostDaysDispo[0].toLocaleString() + " €, Dauer: " + iCostDaysDispo[1].toString() + " Tage";

            if (iCostDaysDispo[1] === 0 || iCostDaysDispo[1] === 0 || iCostDaysDispo[2] === 0) {
              if (iCostDaysDispo[2] === 0) {
                bnBuild.innerText += ". Zu wenig Geld!"
              }
              bnBuild.disabled = true;
            } else {
              bnBuild.disabled = false;
            }
          }
        }
      });
    }

    function getTopring() {
      $.ajax({
        url: '/Member/StadiumGetCostTopring',
        dataType: "JSON",
        success: function (sCostLength) {
          bnBuildTopring = document.getElementById("bnBuildTopring");

          bnBuildTopring.disabled = true;

          if (sCostLength) {
            bnBuildTopring.setAttribute('data-sCost', sCostLength[0]);
            bnBuildTopring.setAttribute('data-sDur',  sCostLength[1]);
            bnBuildTopring.innerHTML = "Oberring bauen. Kosten: " + sCostLength[0] + ", Dauer: " + sCostLength[1] + " Tage";

            if (sCostLength[1] == "0" || sCostLength[1] == "" || sCostLength[2] == "0") {
              bnBuildTopring.disabled = true;
            } else {
              bnBuildTopring.disabled = false;
            }
          }
        }
      });

      $.ajax({
        url: '/Member/StadiumGetTopringProgress',
        dataType: "JSON",
        success: function (fPgTr) {
          if (fPgTr >= 0.0) {
            // Create progress bars
            var pbTr = $("#pbTopring");
            pbTr.progressbar({
              value: fPgTr * 100
            });
            pbTr.css("display", "block");

            bnBuildTopring = document.getElementById("bnBuildTopring");
            bnBuildTopring.disabled = true;
            bnBuildTopring.innerHTML = "Oberring: " + (fPgTr * 100).toFixed(1) + "%";
          }
        }
      });
    }

    function getRenewPitchCostDays() {
      $.ajax({
        url: '/Member/StadiumRenewPitchCost',
        dataType: "JSON",
        success: function (pitch) {
          var bnRenewPitch = document.getElementById("bnRenewPitch");
          bnRenewPitch.innerText = "Rasen +" + pitch[0] + ", Kosten: " + pitch[1] + "€";

          if (pitch[1] == "0" || pitch[1] == "") {
            bnRenewPitch.disabled = true;
          } else {
            bnRenewPitch.disabled = false;
          }
        }
      });
    }

    function buildBlock(iBlock, iSeats, iType) {
      $.when(getBalanceAjax()).done(function (iBalance) {
        $.ajax({
          url: '/Member/StadiumChangeSet',
          dataType: "JSON",
          data: { iBlock: iBlock, iSeats: iSeats, iType: iType },
          success: function (sMessage) {
            // Update ltBlocks
            ltBlocks[iBlock].iSeats = iSeats;
            ltBlocks[iBlock].iType = iType;
            ltBlocks[iBlock].iSeatsDaysConstruct = 1;
            ltBlocks[iBlock].iSeatsDaysConstructIni = 1;

            var cbBuildBlocks = document.getElementById("cbBuildBlocks");
            cbBuildBlocks.checked = false;
            var sctBuildBlocks = document.getElementById("sctBuildBlocks");
            sctBuildBlocks.disabled = true;
            drawSeats(ltBlocks, bTopring, -1);

            updateBalance(iBalance[0]);

            if (bSound) {
              var audioConstruction = new Audio("/Content/Sound/construction.wav");
              if (audioConstruction) {
                audioConstruction.volume = 0.5;
                audioConstruction.play();
              }
            }

            alert(sMessage);
          }
        });
      });
    }

    function drawSeats(ltBlocks, bTopring, iBlockBuild) {
      if (!e) var e = window.event;
      if (e) {
        e.cancelBubble = true;
        if (e.stopPropagation) {
          e.stopPropagation();
        }
      }

      // Reset build button
      var bnBuild = document.getElementById("bnBuild");
      bnBuild.disabled = true;
      bnBuild.innerText = "Block ausbauen";

      var divStadion = document.getElementById("divStadion");

      var bMobile = divStadion.offsetWidth < 500;

      var ltPts = [];
      for (var i = 0; i < ltBlocks.length; i++) {
        ltPts.push({ X: 0, Y: 0 });
      }

      var fDivWidth = 0.07;
      var fDivHeight = 0.04;
      ltPts[ 0].X = 0.27;                         ltPts[ 0].Y = bTopring ? 0.77 : 0.73;        // A
      ltPts[ 1].X = 0.50 - (fDivWidth / 2);       ltPts[ 1].Y = ltPts[ 0].Y; // B
      ltPts[ 2].X = 1 - ltPts[0].X - fDivWidth;   ltPts[ 2].Y = ltPts[ 0].Y; // C
      ltPts[ 3].X = bMobile ? 0.72 : 0.80;        ltPts[ 3].Y = 0.55;        // D
      ltPts[ 4].X = ltPts[ 3].X;                  ltPts[ 4].Y = 0.32;        // E
      ltPts[ 5].X = ltPts[ 2].X;                  ltPts[ 5].Y = bTopring ? 1 - ltPts[ 0].Y - fDivHeight : 0.12; // F
      ltPts[ 6].X = ltPts[ 1].X;                  ltPts[ 6].Y = ltPts[ 5].Y; // G
      ltPts[ 7].X = ltPts[ 0].X;                  ltPts[ 7].Y = ltPts[ 5].Y; // H
      ltPts[ 8].X = bMobile && ltBlocks[18].iSeats > 0 ? 1 - ltPts[4].X - fDivWidth : 0.20 - fDivWidth; ltPts[ 8].Y = ltPts[4].Y; // I
      ltPts[ 9].X = bMobile && ltBlocks[19].iSeats > 0 ? 1 - ltPts[3].X - fDivWidth : 0.20 - fDivWidth; ltPts[ 9].Y = ltPts[3].Y; // J

      if (bTopring) {
        ltPts[10].X = ltPts[ 0].X;                  ltPts[10].Y = 0.9;         // A1
        ltPts[11].X = ltPts[ 1].X;                  ltPts[11].Y = ltPts[10].Y; // B1
        ltPts[12].X = ltPts[ 2].X;                  ltPts[12].Y = ltPts[10].Y; // C1
        ltPts[13].X = 0.88;                         ltPts[13].Y = ltPts[ 3].Y; // D1
        ltPts[14].X = ltPts[13].X;                  ltPts[14].Y = ltPts[ 4].Y; // E1
        ltPts[15].X = ltPts[ 5].X;                  ltPts[15].Y = bMobile ? 0.01 : 0.05; // F1
        ltPts[16].X = ltPts[ 6].X;                  ltPts[16].Y = ltPts[15].Y; // G1
        ltPts[17].X = ltPts[ 7].X;                  ltPts[17].Y = ltPts[15].Y; // H1
        ltPts[18].X = bMobile && ltBlocks[18].iSeats > 0 ? 0.01 : 1 - ltPts[14].X - fDivWidth; ltPts[18].Y = ltPts[ 8].Y; // I1
        ltPts[19].X = bMobile && ltBlocks[19].iSeats > 0 ? 0.01 : 1 - ltPts[13].X - fDivWidth; ltPts[19].Y = ltPts[ 9].Y; // J1
        ltPts[20].X = 0.08;                         ltPts[20].Y = 0.84;        // K
        ltPts[21].X = 1 - ltPts[20].X - fDivWidth;  ltPts[21].Y = ltPts[20].Y; // L
        ltPts[22].X = ltPts[21].X;                  ltPts[22].Y = 0.12;        // M
        ltPts[23].X = ltPts[20].X;                  ltPts[23].Y = ltPts[22].Y; // N
      }

      var sBlockType = ["Stehpl.", "Sitzpl.", "V.I.P."];

      divStadion.innerHTML = '';

      var iptSeats;

      for (var i = 0; i < ltBlocks.length; i++) {
        if (i > 9 && !bTopring) {
          break;
        }

        var block = ltBlocks[i];

        var divBlock = document.createElement("div");
        divBlock.className = "divBlock";
        divBlock.style.position = "absolute";
        divBlock.style.left = (ltPts[i].X * 100).toFixed(0) + "%";
        divBlock.style.top  = (ltPts[i].Y * 100).toFixed(0) + "%";
        divBlock.style.width = (fDivWidth * 100).toString() + "%";
        if (block.iSeats > 0) {
          divBlock.style.minWidth = "64px";
        }
        //divBlock.style.height = (fDivHeight * 100).toString() + "%";
        divBlock.style.textAlign = "center";
        //divBlock.style.border = "1px solid red";
        divBlock.style.backgroundColor = "white";
        divBlock.style.webkitBorderRadius = "3px";

        if (iBlockBuild === i && block.iSeatsDaysConstruct === 0 && !iptSeats) {
          divBlock.style.minWidth = "64px";
          divBlock.style.zIndex = 99;

          iptSeats = document.createElement("input");
          iptSeats.id = "iptBlockSeats_" + iBlockBuild.toString();
          iptSeats.style.width = "100%";
          iptSeats.type = "number";
          iptSeats.value = block.iSeats.toString();

          var sctType = document.createElement("select");
          sctType.id = "sctBlockType";
          sctType.style.width = "100%";
          $.each(sBlockType, function (j, blkType) {
            var optBlockType = document.createElement("option");
            optBlockType.value = j;
            optBlockType.text = blkType;
            optBlockType.selected = j === block.iType;
            sctType.appendChild(optBlockType);
          });

          iptSeats.addEventListener("change", function () {
            getStadiumBuildBlock(iBlockBuild, parseInt(this.value), parseInt(sctType.value));
          });
          iptSeats.addEventListener("keyup", function () {
            getStadiumBuildBlock(iBlockBuild, parseInt(this.value), parseInt(sctType.value));
          });

          sctType.addEventListener("change", function () {
            getStadiumBuildBlock(iBlockBuild, parseInt(iptSeats.value), parseInt(this.value));
          });

          divBlock.appendChild(iptSeats);
          divBlock.appendChild(sctType);
        } else {
          divBlock.style.border = "1px solid black";

          var txtBlock = document.createElement("text");
          //txtBlock.style.color = "white";
          txtBlock.innerHTML = "<strong>" + ltBlocks[i].sName + "</strong>";
          if (ltBlocks[i].iSeats > 0) {
            txtBlock.innerHTML += ": " + ltBlocks[i].iSeats.toLocaleString() + " " + sBlockType[ltBlocks[i].iType];
          }
          //txtBlock.style.zIndex = 99;
          divBlock.appendChild(txtBlock);

          // Progress bar
          if (block.iSeatsDaysConstruct > 0) {
            divBlock.style.backgroundColor = "yellow";

            var divPb = document.createElement("div");
            divPb.style.position = "relative";
            divPb.style.top = "0px";
            divPb.style.left = "2%";
            divPb.style.marginBottom = "2px";
            divPb.style.width = "96%";
            divPb.style.backgroundColor = "white";
            divPb.style.webkitBorderRadius = "3px";
            var divPb1 = document.createElement("div");
            divPb1.className = "myPb";
            var fProgress = (100 * (block.iSeatsDaysConstructIni - block.iSeatsDaysConstruct) / block.iSeatsDaysConstructIni);
            divPb1.style.width = fProgress.toString() + '%';
            divPb1.innerHTML = fProgress.toFixed(1) + '%';
            divPb.appendChild(divPb1);
            divBlock.appendChild(divPb);
          }

          divBlock.style.opacity = 0.75;
        }

        divStadion.appendChild(divBlock);
      }

      if (iptSeats) {
        iptSeats.focus();
      }
    }

    function buildTopring() {
      $.when(getBalanceAjax()).done(function (iBalance) {
        $.ajax({
          url: '/Member/StadiumBuildTopring',
          dataType: "JSON",
          success: function (sMessage) {
            getTopring();
            updateBalance(iBalance[0]);

            if (bSound) {
              var audioConstruction = new Audio("/Content/Sound/construction.wav");
              if (audioConstruction) {
                audioConstruction.volume = 0.5;
                audioConstruction.play();
              }
            }

            alert(sMessage);
          }
        });
      });
    }

    function getExtras() {
      $.ajax({
        url: '/Member/StadiumGetExtras',
        dataType: "JSON",
        success: function (sCurrent) {
          var txtVideo = document.getElementById("txtVideo");
          txtVideo.innerText = "Aktuell: " + sCurrent[0][0];
          if (sCurrent[0][2] != "0") {
            var txtVideoNew = document.getElementById("txtVideoNew");
            txtVideoNew.innerText = "Ausbau zu: " + sCurrent[0][1] + " (noch\xa0" + sCurrent[0][2] + "d)"
            $("#txtVideoNew").css("display", "block");
            $("#pbVideo").progressbar("value", parseFloat(sCurrent[0][3].replace("%", "").replace(",", ".")));
            $("#pbVideo").css("display", "block");
            $("#tbVideo").css("display", "none");
            $("#bnBuildVideo").css("display", "none");
            $("#divVideo").css("display", "none");
          }

          $("#txtSnackbar").text("Aktuell: " + sCurrent[1][0]);
          if (sCurrent[1][2] != "0") {
            $("#txtSnackbarNew").text("Ausbau zu: " + sCurrent[1][1] + " (noch\xa0" + sCurrent[1][2] + "d)");
            $("#txtSnackbarNew").css("display", "block");
            $("#pbSnackbar").progressbar("value", parseFloat(sCurrent[1][3].replace("%", "").replace(",", ".")));
            $("#pbSnackbar").css("display", "block");
            $("#divSnackbar").css("display", "none");
            $("#bnBuildSnackbar").css("display", "none");
          }

          $("#txtToilets").text("Aktuell: " + sCurrent[2][0]);
          if (sCurrent[2][2] != "0") {
            $("#txtToiletsNew").text("Ausbau zu: " + sCurrent[2][1] + " (noch\xa0" + sCurrent[2][2] + "d)");
            $("#txtToiletsNew").css("display", "block");
            $("#pbToilets").progressbar("value", parseFloat(sCurrent[2][3].replace("%", "").replace(",", ".")));
            $("#pbToilets").css("display", "block");
            $("#divToilets").css("display", "none");
            $("#bnBuildToilets").css("display", "none");
          }
        }
      });
    }

    // Video-wall
    function getVideoCost() {
      var bnBuildVideo = document.getElementById("bnBuildVideo");
      bnBuildVideo.disabled = true;

      var iVideo = $('#ddlVideo').val();
      $.ajax({
        url: '/Member/StadiumGetCostVideo',
        dataType: "JSON",
        data: { iLevel: iVideo },
        success: function (sCostDaysDispo) {
          bnBuildVideo.innerText = "Kosten: " + sCostDaysDispo[0] + " €, Dauer: " + sCostDaysDispo[1] + " Tage";

          if (sCostDaysDispo[1] == "0" || sCostDaysDispo[1] == "" || sCostDaysDispo[2] == "0") {
            bnBuildVideo.disabled = true;
          } else {
            bnBuildVideo.disabled = false;
          }
        }
      });
    }

    function buildVideo() {
      $.when(getBalanceAjax()).done(function (iBalance) {
        var iVideo = $('#ddlVideo').val();

        $.ajax({
          url: '/Member/StadiumBuildVideo',
          dataType: "JSON",
          data: { iLevel: iVideo },
          success: function (sMessage) {
            getExtras();
            updateBalance(iBalance[0]);

            if (bSound) {
              var audioConstruction = new Audio("/Content/Sound/construction.wav");
              if (audioConstruction) {
                audioConstruction.volume = 0.5;
                audioConstruction.play();
              }
            }

            alert(sMessage);
          }
        });
      });
    }

    // Snackbars
    function getSnackbarCost() {
      var bnBuildSnackbar = document.getElementById("bnBuildSnackbar");
      bnBuildSnackbar.disabled = true;

      var iSnackbar = $('#tbSnackbar').val();
      $.ajax({
        url: '/Member/StadiumGetCostSnackbar',
        dataType: "JSON",
        data: { iBuildNew: iSnackbar },
        success: function (sCostDaysDispo) {
          bnBuildSnackbar.innerText = "Kosten: " + sCostDaysDispo[0] + " €, Dauer: " + sCostDaysDispo[1] + " Tage";

          if (sCostDaysDispo[1] == "0" || sCostDaysDispo[1] == "" || sCostDaysDispo[2] == "0") {
            bnBuildSnackbar.disabled = true;
          } else {
            bnBuildSnackbar.disabled = false;
          }
        }
      });
    }

    function buildSnackbar() {
      $.when(getBalanceAjax()).done(function (iBalance) {
        var iSnackbar = $('#tbSnackbar').val();

        $.ajax({
          url: '/Member/StadiumBuildSnackbar',
          dataType: "JSON",
          data: { iBuildNew: iSnackbar },
          success: function (sMessage) {
            getExtras();
            updateBalance(iBalance[0]);

            if (bSound) {
              var audioConstruction = new Audio("/Content/Sound/construction.wav");
              if (audioConstruction) {
                audioConstruction.volume = 0.5;
                audioConstruction.play();
              }
            }

            alert(sMessage);
          }
        });
      });
    }

    // Toilets
    function getToiletsCost() {
      var bnBuildToilets = document.getElementById("bnBuildToilets");
      bnBuildToilets.disabled = true;

      var iToilets = $('#tbToilets').val();
      $.ajax({
        url: '/Member/StadiumGetCostToilets',
        dataType: "JSON",
        data: { iBuildNew: iToilets },
        success: function (sCostDaysDispo) {
          bnBuildToilets.innerText = "Kosten: " + sCostDaysDispo[0] + " €, Dauer: " + sCostDaysDispo[1] + " Tage";

          if (sCostDaysDispo[1] == "0" || sCostDaysDispo[1] == "" || sCostDaysDispo[2] == "0") {
            bnBuildToilets.disabled = true;
          } else {
            bnBuildToilets.disabled = false;
          }
        }
      });
    }

    function buildToilets() {
      $.when(getBalanceAjax()).done(function (iBalance) {
        var iToilets = $('#tbToilets').val();

        $.ajax({
          url: '/Member/StadiumBuildToilets',
          dataType: "JSON",
          data: { iBuildNew: iToilets },
          success: function (sMessage) {
            getExtras();
            updateBalance(iBalance[0]);

            if (bSound) {
              var audioConstruction = new Audio("/Content/Sound/construction.wav");
              if (audioConstruction) {
                audioConstruction.volume = 0.5;
                audioConstruction.play();
              }
            }

            alert(sMessage);
          }
        });
      });
    }

    function drawPitchQuality() {
      $.ajax({
        url: '/Member/StadiumGetPitchQuality',
        dataType: "JSON",
        success: function (fPitchQuality) {
          var txtPitchQuality = document.getElementById("txtPitchQuality");
          txtPitchQuality.innerText = "Akt. Rasenqualität: " + (fPitchQuality * 100).toFixed(1) + "%";
        }
      });
    }
  </script>
</head>

<body>
  @{
    var sStadion = "";
    string sName = "";
    if (Model != null) {
      if (!string.IsNullOrEmpty(Model.sName)) {
        sName = Model.sName;
        sStadion = Model.stadion.getSeats().ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User));
        sStadion += " (";
        sStadion += Model.stadion.getSeats(0).ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User)) + " / ";
        sStadion += Model.stadion.getSeats(1).ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User)) + " / ";
        sStadion += Model.stadion.getSeats(2).ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User));
        sStadion += ")";
      }
    }

    if (Model.bEditable) {
      <div class="form-group">
        @Html.TextBoxFor(m => m.sName, new { @class = "form-control", @onChange = "setName()" })
      </div>
    } else {
      <h2>@sName</h2>
    }
  }

  <div style="position: relative; width: 100%; height: 600px">
    <h4>@sStadion</h4>

    <div class="image" style="position: relative; width: 100%; margin-bottom: 1%">
      <img id="imgStadium" style="position: relative; width: 100%" src="~/Content/Images/stadium/stadion_S.jpg" alt="" />
      <div id="divStadion" style="position: absolute; margin-left: 0%; width: 100%; height: 100%; top: 0%; left: 0%; border: 1px solid black"></div>

      @* Pitch quality *@
      <div style="position: absolute; left: 25%; width: 50%; min-width: 160px; height: auto; top: 44%; text-align: center">
        <p id="txtPitchQuality" style="font-weight: bold"></p>
        <button type="submit" id="bnRenewPitch" class="btn btn-default" style="width: 50%; min-width: 200px">Rasen +10%, Kosten: 0</button>
      </div>
    </div>

    @{
      if (Model.stadion != null) {
        <div style="width: 100%; height: 76px">
          <label style="float: left; margin-right: 8px; margin-top: 6px">
            Baumodus:
            <input id="cbBuildBlocks" type="checkbox" value="false">
          </label>
          <select class="form-control" id="sctBuildBlocks" style="float: left; width: 60px; margin-right: 8px; margin-bottom: 4px" disabled="disabled"></select>
          <button type="submit" id="bnBuild" class="btn btn-default" style="float: right; width: 80%; min-width: 360px" disabled="disabled">Block ausbauen</button>
        </div>
        
        <div id="divTopring" style="position: relative; width: 100%; margin-bottom: 20px">
          <button type="submit" id="bnBuildTopring" class="btn btn-default" style="width: 100%">Oberring bauen. Kosten: 0</button>
          <div id="pbTopring" style="position: absolute; width: 100%; top: 28px"></div>
        </div>

        bool bShow = false;
        for (byte iB = 0; iB < Model.stadion.blocks.Length; iB++) {
          if (Model.iSeatsBuild[iB] > 0) {
            bShow = true;
            break;
          }
        }
        if (Model.stadion.iTopringDaysConstruct > 0) {
          bShow = true;
        }

        if (bShow) {
          <div style="position: relative; float: left; width: 100%; margin-bottom: 20px">
            <h4 style="position: relative">Stadionausbau</h4>
            <table class="tStat" style="position: relative; width: auto" border="1" cellpadding="3" summary="Stadionausbau">
              <tr>
                <th style="text-align:center">Name</th>
                <th style="text-align:center">Art</th>
                <th style="text-align:center">Menge</th>
                <th style="text-align:center">Dauer</th>
              </tr>

              @{
                for (byte iB = 0; iB < Model.stadion.blocks.Length; iB++) {
                  if (Model.iSeatsBuild[iB] > 0) {
                    //string sPlDiff = (Model.stadionNew.iPlaetze[iB] - Model.stadion.iPlaetze[iB]).ToString("#,#", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User));
                    <tr>
                      <td align="center">Block @Model.stadion.blocks[iB].sName</td>
                      <td align="center">@CornerkickManager.Stadium.sBlocktype[Model.stadionNew.blocks[iB].iType]</td>
                      <td align="center">@Model.stadion.blocks[iB].iSeats</td>
                      <td align="center">@Model.iSeatsBuild[iB] d</td>
                    </tr>
                  }
                }

                if (Model.stadion.iTopringDaysConstruct > 0) {
                  //string sPlDiff = (Model.stadionNew.iPlaetze[iB] - Model.stadion.iPlaetze[iB]).ToString("#,#", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User));
                  <tr>
                    <td align="center">Oberring</td>
                    <td align="center">-</td>
                    <td align="center">1</td>
                    <td align="center">@Model.stadion.iTopringDaysConstruct d</td>
                  </tr>
                }
              }
            </table>
          </div>
        }

        <div style="position: relative; width: 100%; margin-bottom: 10px; float: left">
          <h3 style="position: relative">Stadionextras</h3>
          <div style="position: relative; float: left; width: 320px; height: 134px; margin-right: 10px; margin-bottom: 10px; padding: 6px; border: 1px solid black; background-color: white">
            <strong style="position: relative; width: 308px; font-size: 18px">Anzeigetafel</strong>
            <p id="txtVideo" style="position: relative; width: 308px; margin: 0; font-size: 18px"></p>
            <p id="txtVideoNew" style="position: relative; width: 308px; margin-top: 4px; margin-bottom: 2px; font-size: 16px; display: none"></p>
            <div id="pbVideo" style="position: relative; width: 308px"><div id="plVideo" class="progress-label"></div></div>
            <div id="divVideo" style="position: relative; width: 100%; height: 36px">
              <text style="position: absolute; left: 0px; top: 6px; width: 40px; font-size: 16px">Neu:</text>
              @Html.DropDownListFor(m => m.iVideo, Model.ltDdlVideo, new { @class = "form-control", @onchange = "getVideoCost()", id = "ddlVideo", @style = "position: absolute; width: 268px; min-width: 268px; left: 40px" })
            </div>
            <button type="submit" id="bnBuildVideo" class="btn btn-default" style="width: 49%; min-width: 308px">Kosten: 0</button>
          </div>

          <div id="divSnackbarContainer" style="position: relative; float: left; width: 320px; height: 134px; margin-right: 10px; margin-bottom: 10px; padding: 6px; border: 1px solid black; background-color: white">
            @{
              if (Model.iSnackbarReq > Model.stadion.iSnackbar) {
                string sInfo = "Ihre Fans verlangen bei ausverkauftem Stadion min. " + Model.iSnackbarReq.ToString() + " Imbissbuden";
                <img title="@sInfo" style="position: absolute; top: 6px; right: 6px; width: 30px; z-index: 99" src="/Content/Icons/attention.png">
              }
            }
            <strong style="position: relative; width: 308px; font-size: 18px">Imbissbuden</strong>
            <p id="txtSnackbar" style="position: relative; width: 308px; margin: 0; font-size: 18px"></p>
            <p id="txtSnackbarNew" style="position: relative; width: 308px; margin-top: 4px; margin-bottom: 2px; font-size: 16px; display: none"></p>
            <div id="pbSnackbar" style="position: relative; width: 308px"><div id="plSnackbar" class="progress-label"></div></div>
            <div id="divSnackbar" style="position: relative; width: 100%; height: 36px">
              <text style="position: absolute; left: 0px; top: 6px; width: 40px; font-size: 16px">Neu:</text>
              @Html.EditorFor(Model => Model.iSnackbarNew, new { htmlAttributes = new { @class = "form-control", @type = "number", @style = "position: absolute; width: 268px; left: 40px; text-align: right", id = "tbSnackbar", autocomplete = "off", min = "0" } })
            </div>
            <button type="submit" id="bnBuildSnackbar" class="btn btn-default" style="width: 308px">Kosten: 0</button>
          </div>

          <div id="divToiletsContainer" style="position: relative; float: left; width: 320px; height: 134px; margin-right: 10px; margin-bottom: 10px; padding: 6px; border: 1px solid black; background-color: white">
            @{
              if (Model.iToiletsReq > Model.stadion.iToilets) {
                string sInfo = "Ihre Fans verlangen bei ausverkauftem Stadion min. " + Model.iToiletsReq.ToString() + " Toiletten";
                <img title="@sInfo" style="position: absolute; top: 6px; right: 6px; width: 30px; z-index: 99" src="/Content/Icons/attention.png">
              }
            }
            <strong style="position: relative; width: 308px; font-size: 18px">Toiletten</strong>
            <p id="txtToilets" style="position: relative; width: 308px; margin: 0; font-size: 18px"></p>
            <p id="txtToiletsNew" style="position: relative; width: 308px; margin-top: 4px; margin-bottom: 2px; font-size: 16px; display: none"></p>
            <div id="pbToilets" style="position: relative; width: 308px"><div id="plToilets" class="progress-label"></div></div>
            <div id="divToilets" style="position: relative; width: 100%; height: 36px">
              <text style="position: absolute; left: 0px; top: 6px; width: 40px; font-size: 16px">Neu:</text>
              @Html.EditorFor(Model => Model.iToiletsNew, new { htmlAttributes = new { @class = "form-control", @type = "number", @style = "position: relative; width: 268px; left: 40px; text-align: right", id = "tbToilets", autocomplete = "off", min = "0" } })
            </div>
            <button type="submit" id="bnBuildToilets" class="btn btn-default" style="width: 308px">Kosten: 0</button>
          </div>
        </div>
      }
    }
  </div>
</body>
</html>
