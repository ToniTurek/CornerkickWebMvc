@model CornerkickWebMvc.Models.TrainingModel

@{
  ViewBag.Title = "Training";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
  function setTraining(sct) {
    var iDay = parseInt(sct.getAttribute('data-iDay'));
    var iToD = parseInt(sct.getAttribute('data-iToD'));

    $.ajax({
      url: '/Member/setTraining',
      type: "GET",
      dataType: "JSON",
      data: { iTrainingType: sct.value, iDay: iDay + (iWeekGlobal * 7), iIxTimeOfDay: iToD },
      success: function () {
        plotTrainingDevelopment(false);
      }
    });
  }
</script>

<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width" />
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script type="text/javascript" src="~/Scripts/jquery-2.0.0.min.js"></script>
  <script type="text/javascript" src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
  <script type="text/javascript" src="~/Scripts/canvasjs.min.js"></script>
  <script type="text/javascript" src="~/Scripts/moment.js"></script>
  <script type="text/javascript" src="~/Scripts/dialog.js"></script>

  <script type="text/javascript">
    dataPointsNew = [];
    var iWeekGlobal = 0;

    $(document).ready(function () {
      plotTrainingPlan(0);
      plotTrainingDevelopment(true);

      $.get("/Member/GetTeamFAve/", function (dataFAve) {
        var chartFAve = new CanvasJS.Chart("chartContainerFAve", {
          animationEnabled: true,
          theme: "theme2",//theme1
          axisX: {
            gridThickness: 1,
            interval: 1
          },
          axisY: {
            valueFormatString: "0.0%",
            includeZero: true
          },
          legend: {
            horizontalAlign: "center", // left, center ,right
            verticalAlign: "bottom",  // top, center, bottom
            dockInsidePlotArea: true
          },
          data: [
            {
              // Change type to "bar", "column", "splineArea", "area", "spline", "pie",etc.
              type: "column",
              indexLabel: "{y}",
              indexLabelFontColor: "#EEEEEE",
              indexLabelPlacement: "inside",
              yValueFormatString: "0.00%",
              dataPoints: [
                { label: "Schnelligkeit", y: dataFAve[0].y },
                { label: "Technik", y: dataFAve[1].y },
                { label: "Zweikampf", y: dataFAve[2].y },
                { label: "Abspiel", y: dataFAve[3].y },
                { label: "Abschluss", y: dataFAve[4].y },
                { label: "Standards", y: dataFAve[5].y },
                { label: "Torwart", y: dataFAve[6].y }
              ]
            }
          ]
        });

        chartFAve.render();
      });
    });

    var sTrainingTimes = ["9:30", "12:00", "16:30"];
    var sTrainingNames = ["Frei", "Regeneration", "Kondition", "Spritzigkeit", "Zweikämpfe", "5 gegen 2", "Torschüsse", "Flanken / Abschluss", "Standardsituationen", "Trainingsspiel", "Fussballtennis", "Kopfballpendel", "Yoga", "Elfmeterschießen"];
    var dateOptions = { weekday: 'short', month: '2-digit', day: '2-digit' };
    function plotTrainingPlan(iWeek) {
      $.ajax({
        type: 'post',
        url: '/Member/TrainingGetPlan',
        dataType: "json",
        data: { iWeek: iWeek },
        success: function (ltTu) {
          var tblTrainingPlan = document.getElementById("tblTrainingPlan").getElementsByTagName('tbody')[0];
          while (tblTrainingPlan.hasChildNodes()) {
            tblTrainingPlan.removeChild(tblTrainingPlan.firstChild);
          }

          // Add header row
          var rowHead = tblTrainingPlan.insertRow();
          rowHead.insertCell();
          for (iD = 0; iD < ltTu.length; iD++) {
            var date = moment(ltTu[iD][0].dt).toDate();
            var cell0 = rowHead.insertCell();
            cell0.innerHTML = date.toLocaleDateString("de-DE", dateOptions);
            cell0.style.textAlign = "center";
            cell0.style.fontWeight = 'bold';
          }

          var iIxDay;
          for (iIxDay = 0; iIxDay < ltTu[0].length; iIxDay++) {
            var row = tblTrainingPlan.insertRow();

            //var date = moment(ltTu[0][iIxDay].dt).toDate();
            var cell0 = row.insertCell();
            cell0.innerHTML = sTrainingTimes[iIxDay];
            cell0.style.textAlign = "right";
            cell0.style.fontWeight = 'bold';

            var iD;
            for (iD = 0; iD < ltTu.length; iD++) {
              var sct = document.createElement("select");

              var iT;
              for (iT = 0; iT < sTrainingNames.length; iT++) {
                var opt = document.createElement('option');
                opt.value = iT;
                opt.innerHTML = sTrainingNames[iT];
                if (ltTu[iD][iIxDay].iType < 0) {
                  opt.selected = iT === -(ltTu[iD][iIxDay].iType + 1);
                } else {
                  opt.selected = iT === ltTu[iD][iIxDay].iType;
                }
                sct.appendChild(opt);
              }

              sct.classList.add('form-control');
              sct.style.width = "126px";
              if (ltTu[iD][iIxDay].iType < 0) {
                sct.disabled = true;
              } else {
                sct.setAttribute('data-iDay', iD);
                sct.setAttribute('data-iToD', iIxDay);
                sct.onchange = function () { setTraining(this); };
              }

              var cell = row.insertCell();
              //cell.className = "alignRight";
              cell.appendChild(sct);
            }
          }
        }
      });
    }

    function changeWeek(iDeltaWeek) {
      iWeekGlobal += iDeltaWeek;
      plotTrainingPlan(iWeekGlobal);
    }

    function copyWeek() {
      getDialog(document.body, "Achtung:<br>Bereits festgelegte Trainingseinheiten werden überschrieben!", "Trainingsplan", copyWeekAjax);
    }

    function copyWeekAjax() {
      $.ajax({
        type: 'post',
        url: '/Member/TrainingCopyPlan',
        dataType: "json",
        data: { iWeek: iWeekGlobal },
        success: function () {
        }
      });
    }

    function plotTrainingDevelopment(bAnimate) {
      var bExpected = document.getElementById("cbPlotExpected").checked;

      var selectCamp = document.getElementById("selectCamp");
      if (bExpected) {
        selectCamp.style.visibility = "visible";
      } else {
        selectCamp.style.visibility = "hidden";
      }

      $.ajax({
        type: 'post',
        url: '/Member/GetTeamDevelopmentData',
        dataType: "json",
        data: { bExpected: bExpected, iTrainingsCamp: $("#selectCamp").val() },
        success: function (dataKFM) {
          var chart = new CanvasJS.Chart("chartContainer", {
            animationEnabled: bAnimate,
            theme: "theme2",//theme1
            axisX: {
              gridThickness: 1,
              interval: 1,
              intervalType: "day",
              valueFormatString: "DDD DD MMM",
              labelAngle: -20
            },
            axisY: {
              valueFormatString: "0.0%",
              includeZero: false
            },
            legend: {
              horizontalAlign: "center", // left, center ,right
              verticalAlign: "bottom",  // top, center, bottom
              dockInsidePlotArea: true
            },
            data: [
              {
                // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
                type: "line",
                color: "blue",
                showInLegend: true,
                legendText: "Kondition",
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[0][0]
              },
              {
                type: "line",
                color: "green",
                showInLegend: true,
                legendText: "Frische",
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[0][1]
              },
              {
                type: "line",
                color: "red",
                showInLegend: true,
                legendText: "Moral",
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[0][2]
              },
              {
                type: "line",
                color: "blue",
                lineDashType: "dash",
                lineThickness: 1,
                showInLegend: false,
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[1][0]
              },
              {
                type: "line",
                color: "green",
                lineDashType: "dash",
                lineThickness: 1,
                showInLegend: false,
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[1][1]
              },
              {
                type: "line",
                color: "red",
                lineDashType: "dash",
                lineThickness: 1,
                showInLegend: false,
                xValueType: "dateTime",
                xValueFormatString: "DD MMM HH:mm",
                yValueFormatString: "0.0%",
                dataPoints: dataKFM[1][2]
              }
            ]
          });

          chart.render();
        }
      });
    }
  </script>
</head>

<body>
  <div style="height: 1800px">
    <h3>Trainingsplan</h3>

    <div style="position: relative; width: 1000px; height: auto; margin-bottom: 20px">
      <div style="position: relative; width: 100%; height: 32px">
        <button type="submit" id="bnWeekPrev" class="btn btn-default" onclick="changeWeek(-1)" style="position: absolute; width: 49%; left:  0px"><< vorherige Woche</button>
        <button type="submit" id="bnWeekNext" class="btn btn-default" onclick="changeWeek(+1)" style="position: absolute; width: 49%; right: 0px">nächste Woche >></button>
      </div>
      <table id="tblTrainingPlan" border="1" cellpadding="4" style="position: relative; width: 100%; margin-top: 6px">
        <tbody></tbody>
      </table>
      <button type="submit" id="bnCopyWeek" class="btn btn-default" onclick="copyWeek()" style="position: relative; width: 100%; margin-top: 4px">Trainingswoche bis Saisonende fortführen</button>
    </div>

    <div style="position: relative; float: left">
      <h3>Bisherige Trainings</h3>

      <div style="position: relative; float: left; margin-right: 10px; margin-bottom: 10px">
        <table border="1" cellpadding="4">
          <thead>
            <tr>
              <th style="font-size: 18px; color: red; text-align: center; border-color: black" colspan="3">Konditionelles Training</th>
            </tr>
            <tr>
              <th style="text-align: center">Type</th>
              <th style="text-align: center">Anzahl</th>
              <th style="text-align: center">Anteil</th>
            </tr>
          </thead>
          <tbody>
            @{
              foreach (CornerkickManager.Player.Training tr in MvcApplication.ckcore.plr.ltTraining) {
                if (tr.iId >= 0 && tr.fCondi > 0f) {
                  <tr>
                    <td style="text-align: center">@tr.sName</td>
                    <td style="text-align: center">@Model.iTrainingCount[tr.iId].ToString()</td>
                    <td style="text-align: right">@Model.sTrainingCountRel[tr.iId]</td>
                  </tr>
                }
              }
            }
          </tbody>
        </table>
      </div>

      <div style="position: relative; float: left; margin-bottom: 10px">
        <table border="1" cellpadding="4">
          <thead>
            <tr>
              <th style="font-size: 18px; color: green; text-align: center; border-color: black" colspan="3">Regeneratives Training</th>
            </tr>
            <tr>
              <th style="text-align: center">Type</th>
              <th style="text-align: center">Anzahl</th>
              <th style="text-align: center">Anteil</th>
            </tr>
          </thead>
          <tbody>
            @{
              foreach (CornerkickManager.Player.Training tr in MvcApplication.ckcore.plr.ltTraining) {
                if (tr.iId >= 0 && tr.fCondi < 0f) {
                  <tr>
                    <td style="text-align: center">@tr.sName</td>
                    <td style="text-align: center">@Model.iTrainingCount[tr.iId].ToString()</td>
                    <td style="text-align: right">@Model.sTrainingCountRel[tr.iId]</td>
                  </tr>
                }
              }
            }
          </tbody>
        </table>
      </div>
    </div>

    <div style="position: relative; width: 100%; float: left">
      <h3>Mannschaftsentwicklung</h3>
      <div id="chartContainer" style="height: 400px; width: 100%"></div>

      <label style="position: absolute; top: 0px; right: 0px; background-color: white">
        <input type="checkbox" id="cbPlotExpected" name="cbPlotExpected" value="0" onclick="plotTrainingDevelopment(true)" style="margin-left: 4px">
        Vorschau
      </label>
      <select name="Camp" id="selectCamp" onchange="plotTrainingDevelopment(false)" style="position: absolute; top: 20px; right: 0px; width: 80px; background-color: white; display: none">
        <option value="0">aus</option>
        @{
          foreach (CornerkickManager.TrainingCamp.Camp camp in MvcApplication.ckcore.tcp.ltCamps) {
            <option value="@camp.iId.ToString()">@camp.sName</option>
          }
        }
      </select>
    </div>

    <div style="height: 400px; width: 100%; margin-top: 30px; float: left">
      <h3>Trainingsbonus</h3>
      <div id="chartContainerFAve" style="height: 100%; width: 100%"></div>
    </div>
  </div>
</body>
</html>
