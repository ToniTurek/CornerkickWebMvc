@model CornerkickWebMvc.Models.PlayerModel

<head>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="/resources/demos/style.css">
  <script type="text/javascript" src="~/Scripts/jquery-2.0.0.min.js"></script>
  <script type="text/javascript" src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
  <script type="text/javascript" src="~/Scripts/canvasjs.min.js"></script>
  <script type="text/javascript" src="~/Scripts/autoNumeric/autoNumeric-min.js"></script>
  <script type="text/javascript" src="~/Scripts/Player.js"></script>
  <script type="text/javascript" src="~/Scripts/Numbers.js"></script>
</head>

@{
  var player = MvcApplication.ckcore.ltPlayer[Model.iPlayer];
  ViewBag.Title = player.sName;
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
  var iCpt = 0;

  function setIndTraining(iInd) {
    $.ajax({
      url: '/Member/setPlayerIndTraining',
      type: "GET",
      dataType: "JSON",
      data: { iPlayer: @Model.iPlayer, iIndTr: iInd },
      success: function (iIndTr) {
        //alert(iInd);
      }
    });
  }

  function setName() {
    var tbName = document.getElementById("sName");

    var sNewName = $("#sName").val();
    $.ajax({
      url: '/Member/setPlayerName',
      type: "GET",
      dataType: "JSON",
      data: { iPlayer: @Model.iPlayer, sName: sNewName },
      success: function () {
        tbName.style.backgroundColor = "";
      },
      error: function (xhr) {
        tbName.style.backgroundColor = "yellow";
        alert(xhr.responseText);
      }
    });
  }

  function setNo() {
    var iNo = $('#iDdlINo').val();
    $.ajax({
      url: '/Member/setPlayerNo',
      type: "GET",
      dataType: "JSON",
      data: { iPlayer: @Model.iPlayer, iNo: iNo },
      success: function () {
      }
    });
  }

  function setDopingDesc() {
    var iDp = $('#ddlDoping').val();

    $.ajax({
      url: '/Member/PlayerDetailsGetDopingDesc',
      type: "GET",
      dataType: "JSON",
      data: { iDp: iDp },
      success: function (sDopDesc) {
        $("#txtDialogDoping").html(sDopDesc);
      }
    });
  }

  function drawStatistic(iMode) {
    var bSeason = iMode === 0;

    $.ajax({
      url: '/Member/PlayerDetailsGetStatistic',
      type: "GET",
      dataType: "JSON",
      data: { iPlayer: @Model.iPlayer, bSeason: bSeason },
      success: function (sStatistic) {
        $('#tblStatistic tbody').html(sStatistic);
      }
    });
  }

  $(document).ready(function () {
    document.getElementById("divEmblem").style.backgroundImage = '';
    var sEmblemImg = @Html.Raw(Json.Encode(Model.sEmblem));
    $("#divEmblemClub").html(sEmblemImg);

    $("#tbContractSalaryOffer").autoNumeric('init', {
      aSep: '.',
      aDec: ',',
      mDec: '0'
    });

    plotCFM();
    plotPlayerDevelopment();
    drawStatistic(0);

    setSalary(@player.contract.iLength + 1);

    $("#iContractYears").keyup(function () {
      setSalary(@player.contract.iLength + parseInt($(this).val()));
    });

    function setSalary(iYears) {
      $.when(getSalary(@Model.iPlayer, iYears, 0)).done(function (contract) {
        $("#txtContractMoney").html(contract.iSalary.toLocaleString() + " €");
        setMoodText(contract.fMood);
        $("#tbContractSalaryOffer").val(contract.iSalary.toLocaleString());
      });
    }

    $("#bnNegotiate").click(function () {
      var iIdPl = @Model.iPlayer;
      var iYears = $("#iContractYears").val();
      var iSalaryOffer = getIntFromString($("#tbContractSalaryOffer").val());

      $.when(getSalary(iIdPl, iYears, iSalaryOffer)).done(function (contract) {
        if (contract.fMood < 0) {
          alert("Der Spieler hat die Vertragsverhandlungen abgebrochen!");
          jTable.ajax.reload();

          $("#dialogContract").dialog("close");
        } else {
          $("#txtContractMoney").html(contract.iSalary.toLocaleString() + " €");
          setMoodText(contract.fMood);
        }
      });
    });

    function setMoodText(fMood) {
      var txtContractMood = document.getElementById("txtContractMood");
      var fMoodAdj = (fMood - 0.1) / 0.9;

      txtContractMood.innerText = (fMoodAdj * 100).toFixed(0) + "%";
      if (fMoodAdj > 0.5) {
        txtContractMood.style.color = "green";
      } else if (fMoodAdj > 0.25) {
        txtContractMood.style.color = "orange";
      } else {
        txtContractMood.style.color = "red";
      }
    }

    $(function () {
      $("#dialogContract").dialog({
        autoOpen: false,
        width: 400,
        height: 300,
        buttons: {
          "Bestätigen": function () {
            var iYears  = $("#iContractYears").val();
            var sSalary = $("#txtContractMoney").text();
            var sPlayerMood = $("#txtContractMood").text();

            $.ajax({
              url: "/Member/NegotiatePlayerContract",
              type: 'POST',
              traditional: true,
              data: { iId: @Model.iPlayer, iYears: iYears, sSalary: sSalary, sPlayerMood: sPlayerMood, iMode: 0 },
              dataType: "json",
              success: function (response) {
                window.location.reload(true);
                alert(response);
              },
              error: function (xhr) {
                debugger;
                alert(xhr.error);
              }
            });

            $(this).dialog("close");
          },
          Cancel: function () {
            $(this).dialog("close");
          }
        }
      });
    });

    $("#bnContract").click(function () {
      $("#dialogContract").dialog("open");
    });

    $("#bnPutOnTransfer").click(function () {
      $.ajax({
        url: "/Member/PutOnTransferList",
        type: 'POST',
        traditional: true,
        data: { iPlayerId: @Model.iPlayer },
        dataType: "json",
        success: function (response) {
          alert(response);
          window.location.reload(true);
        },
        error: function (xhr) {
          debugger;
          alert(xhr);
        }
      });
    });

    $("#bnTakeFromTransfer").click(function () {
      $.ajax({
        url: "/Member/TakeFromTransferList",
        type: 'POST',
        traditional: true,
        data: { iPlayerId: @Model.iPlayer },
        dataType: "json",
        success: function (response) {
          alert(response);
          window.location.reload(true);
        },
        error: function (xhr) {
          debugger;
          alert(xhr);
        }
      });
    });

    $("#bnCaptain").click(function () {
      iCpt = 0;

      $.when(getCaptainIdAjax(iCpt)).done(function (sCaptain) {
        if (sCaptain) {
          $("#txtCaptain").html("Möchten Sie Ihren bisherigen Kapitän " + sCaptain + " wirklich absetzen?");
          $("#dialogCaptain").dialog("open");
        } else {
          makePlayerCaptainAjax(@Model.iPlayer, iCpt);
        }
      });
    });

    $("#bnCaptain2").click(function () {
      iCpt = 1;

      $.when(getCaptainIdAjax(iCpt)).done(function (sCaptain) {
        if (sCaptain) {
          $("#txtCaptain").html("Möchten Sie Ihren bisherigen Vize-Kapitän " + sCaptain + " wirklich absetzen?");
          $("#dialogCaptain").dialog("open");
        } else {
          makePlayerCaptainAjax(@Model.iPlayer, iCpt);
        }
      });
    });

    $("#dialogCaptain").dialog({
      autoOpen: false,
      buttons: {
        "Bestätigen": function () {
          makePlayerCaptainAjax(@Model.iPlayer, iCpt)

          $(this).dialog("close");
        },
        Cancel: function () {
          $(this).dialog("close");
        }
      }
    });

    $("#bnDoping").click(function () {
      setDopingDesc();
      $("#dialogDoping").dialog("open");
    });

    $("#dialogDoping").dialog({
      autoOpen: false,
      buttons: {
        "Bestätigen": function () {
          var iDp = $('#ddlDoping').val();

          $.ajax({
            url: "/Member/PlayerDetailsDoDoping",
            type: 'POST',
            traditional: true,
            data: { iPlayerId: @Model.iPlayer, iDp: iDp },
            dataType: "json",
            success: function (bOk) {
              if (bOk) {
                plotCFM();
                $("#dialogDoping").dialog("close");
              } else {
                alert("Der Inhalt Ihrer Schwarzen Kasse reicht leider nicht aus...");
              }
            },
            error: function (xhr) {
              alert(xhr.error);
            }
          });
        },
        Cancel: function () {
          $(this).dialog("close");
        }
      }
    });
  }); // $(document).ready(function () {

  function getCaptainIdAjax(iC) {
    return $.ajax({
      url: "/Member/getClubCaptain",
      type: "GET",
      dataType: "JSON",
      data: { iC: iC },
      success: function (sCaptainName) {
        //alert(sCaptainName);
      },
      error: function (xhr) {
        debugger;
        alert(xhr);
      }
    });
  }

  function makePlayerCaptainAjax(iPlayerId, iC) {
    $.ajax({
      url: "/Member/PlayerMakeCaptain",
      type: "GET",
      dataType: "JSON",
      data: { iPlayerId: iPlayerId, iC: iC },
      success: function (response) {
        alert(response);
        window.location.reload(true);
      },
      error: function (xhr) {
        debugger;
        alert(xhr);
      }
    });
  }

  function plotCFM() {
    $.ajax({
      type: 'post',
      url: '/Member/PlayerDetailsGetCFM',
      dataType: "json",
      data: { iPlId: @Model.iPlayer },
      success: function (dataCFM) {
        CanvasJS.addColorSet("customColorSet1",
          [
            "lightblue",
            "blue",
            "green",
            "red",
          ]);

        var chartCFM = new CanvasJS.Chart("divChartCFM", {
          colorSet: "customColorSet1",
          animationEnabled: true,
          theme: "theme2",//theme1
          axisX: {
            gridThickness: 1,
            interval: 1
          },
          axisY: {
            valueFormatString: "0.0%",
            includeZero: true
          },
          legend: {
            horizontalAlign: "center", // left, center ,right
            verticalAlign: "bottom",  // top, center, bottom
            dockInsidePlotArea: true
          },
          data: [
            {
              // Change type to "bar", "column", "splineArea", "area", "spline", "pie",etc.
              type: "column",
              indexLabel: "{y}",
              indexLabelFontColor: "black",
              indexLabelPlacement: "outside",
              yValueFormatString: "0.0%",
              dataPoints: [
                { label: "Kondition", x: 0, y: dataCFM[0].y },
                { label: "",          x: 0, y: dataCFM[1].y },
                { label: "Frische",   x: 1, y: dataCFM[2].y },
                { label: "Moral",     x: 2, y: dataCFM[3].y }
              ]
            }
          ]
        });

        chartCFM.render();
      }
    });
  }

  function plotPlayerDevelopment() {
    $.ajax({
      type: 'post',
      url: '/Member/PlayerDetailsGetDevelopmentData',
      dataType: "json",
      data: { iPlId: @Model.iPlayer },
      success: function (dataDev) {
        var chartDev = new CanvasJS.Chart("divChartDevelopment", {
          animationEnabled: true,
          theme: "theme2",//theme1
          axisX: {
            gridThickness: 1,
            interval: 12,
            valueFormatString: "DD MMM",
            labelAngle: -20
          },
          axisY: {
            title: "Stärke",
            includeZero: false
          },
          legend: {
            horizontalAlign: "center", // left, center ,right
            verticalAlign: "bottom",  // top, center, bottom
            dockInsidePlotArea: true
          },
          data: [
            {
              // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
              type: "line",
              xValueType: "dateTime",
              yValueFormatString: "0.00",
              dataPoints: dataDev
            }
          ]
        });

        chartDev.render();
      }
    });
  }
</script>

<div style="position: relative; width: 100%; height: 100%; min-height: 100%; margin-bottom: 20px; float: left">
  <div id="divEmblemClub" style="position: absolute; width: 10%; right: 0px; border: 1px solid black"></div>

  @{
    string sTalent = (player.iTalent + 1).ToString();
    string sClub = MvcApplication.ckcore.ltClubs[player.iClubId].sName;

    <div style="position: relative; width: 100%; height: 30px">
      @{
        string sPlPrevName = "";
        if (Model.iPlIdPrev >= 0) {
          sPlPrevName = MvcApplication.ckcore.ltPlayer[Model.iPlIdPrev].sName;
          <div style="position: absolute; left:  0%; width: 49%; height: 30px">
            @Html.ActionLink(@sPlPrevName, "PlayerDetails", "Member", new { i = @Model.iPlIdPrev.ToString() }, new { target = "" })
          </div>
        }

        string sPlNextName = "";
        if (Model.iPlIdNext >= 0) {
          sPlNextName = MvcApplication.ckcore.ltPlayer[Model.iPlIdNext].sName;

          <div style="position: absolute; left: 50%; width: 49%; height: 30px">
            @Html.ActionLink(@sPlNextName, "PlayerDetails", "Member", new { i = @Model.iPlIdNext.ToString() }, new { target = "" })
          </div>
        }
      }
    </div>

    <div style="position: relative; width: 100%; height: auto; margin-top: 1%">
      @{
        if (Model.bOwnPlayer && ((MvcApplication.ckcore.dtDatum.Date.Equals(MvcApplication.ckcore.dtSeasonStart.Date) && MvcApplication.ckcore.iSeason <= 1) || Model.bJouth)) {
          <div class="form-group">
            @Html.TextBoxFor(m => m.sName, new { @class = "form-control", @onChange = "setName()" })
          </div>
        } else {
          string sPlName = player.sName;
          if (!Model.bJouth) {
            sPlName += " - " + player.iNr.ToString();
          }
          <h2>@sPlName</h2>
        }
      }
    </div>

    if (Model.bOwnPlayer && (player.iNr < 1 || (MvcApplication.ckcore.dtDatum.Date.Equals(MvcApplication.ckcore.dtSeasonStart.Date) && MvcApplication.ckcore.iSeason <= 1)) && !Model.bJouth) {
      <div class="form-group">
        @Html.LabelFor(m => m.iNo, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
          @Html.DropDownListFor(m => m.iNo, Model.ltDdlNo, new { @class = "form-control", @onchange = "setNo()", id = "iDdlINo", @style = "width:70px" })
        </div>
      </div>
    }
  }

  <div style="position: relative; width: 100%; height: auto">
    <div style="position: relative; width: 260px; height: auto; margin-bottom: 10px; float: left">
      <table cellpadding="1" style="width: 100%">
        <tbody>
          <tr>
            <td align="right">Verein:</td>
            <td align="right">@sClub</td>
          </tr>
          <tr>
            <td align="right">Geburtsdatum:</td>
            <td align="right">@player.dtBirthday.ToString("d", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User)) (@player.getAge(MvcApplication.ckcore.dtDatum).ToString("0"))</td>
          </tr>
          <tr>
            <td align="right">Körpergröße/-gewicht:</td>
            <td align="right">@player.iHeight.ToString("0cm") / @player.iWeight.ToString("0kg")</td>
          </tr>
          <tr>
            <td align="right">Positionen:</td>
            <td align="right">@MvcApplication.ckcore.plr.getStrPos(player)</td>
          </tr>
          <tr>
            <td align="right">Stärke (bereinigt):</td>
            <td align="right">@MvcApplication.ckcore.game.tl.getAveSkill(player, 0, true).ToString("0.0") (@MvcApplication.ckcore.game.tl.getAveSkill(player, 0, false).ToString("0.0"))</td>
          </tr>
          <tr>
            <td align="right">Talent:</td>
            <td align="right">@sTalent</td>
          </tr>
          <tr>
            <td align="right">Fuß (links/rechts):</td>
            @{
              if (player.fFootL > 0.99 && player.fFootR > 0.99) {
                <td align="right">beidfüßig</td>
              } else {
                <td align="right">@player.fFootL.ToString("0%") / @player.fFootR.ToString("0%")</td>
              }
            }
          </tr>
          <tr>
            @{
              string sVerletzung = "keine";
              if (player.fInjury[0] > 0.0) {
                sVerletzung = player.fInjury[0].ToString("0.0") + " Tage (" + (player.fInjury[0] / player.fInjury[1]).ToString("0%") + ") " + MvcApplication.ckcore.sVerletzung[(int)player.fInjury[2]];
              }
            }
            <td align="right">Verletzung:</td>
            <td align="right">@sVerletzung</td>
          </tr>
          <tr>
            <td align="right">Gehalt:</td>
            <td align="right">@player.contract.iSalary.ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User)) €</td>
          </tr>
          <tr>
            @{
              string sDauer = player.contract.iLength.ToString() + " Jahre";
              if (Model.bJouth) {
                sDauer = "Jugendspieler";
              } else if (player.contract.iLength < 2) {
                sDauer = "Saisonende";
              }
            }
            <td align="right">Laufzeit:</td>
            <td align="right">@sDauer</td>
          </tr>
          <tr>
            @{
              string sVal = (MvcApplication.ckcore.plr.getValue(player, 100) * 1000).ToString("N0", CornerkickWebMvc.Controllers.MemberController.getCiStatic(User)) + " €";
            }
            <td align="right">Marktwert:</td>
            <td align="right">@sVal</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div style="position: relative; width: 220px; height: auto; margin-bottom: 10px; float: left">
      <table cellpadding="1" style="width: 100%; margin-bottom: 6px">
        <tbody>
          <tr>
            <td align="right">Führungspersönlichkeit:</td>
            <td align="right">@player.character.fLeader.ToString("0.0%")</td>
          </tr>
          <tr>
            <td align="right">Schußhäufigkeit:</td>
            <td align="right">@player.character.fShoot.ToString("0.0%")</td>
          </tr>
          <tr>
            <td align="right">Teamplayer:</td>
            <td align="right">@player.character.fPass.ToString("0.0%")</td>
          </tr>
          <tr>
            <td align="right">Dribbler:</td>
            <td align="right">@player.character.fDribbling.ToString("0.0%")</td>
          </tr>
          <tr>
            <td align="right">Flexibilität:</td>
            <td align="right">@player.character.fFlexibel.ToString("0.0%")</td>
          </tr>
        </tbody>
      </table>

      <table cellpadding="1" style="width: 100%; margin-bottom: 6px">
        <tbody>
          <tr>
            <td align="right"><ins>Sperren:</ins></td>
          </tr>
          @{
            if (player.iSuspension[0] + player.iSuspension[1] + player.iSuspension[4] == 0) {
              <tr>
                <td align="right">keine</td>
              </tr>
            } else {
              if (player.iSuspension[0] > 0) {
                string sSp = "Liga: " + player.iSuspension[0].ToString() + " Spiele";
                <tr>
                  <td align="right">@sSp</td>
                </tr>
              }
              if (player.iSuspension[1] > 0) {
                string sSp = "Pokal: " + player.iSuspension[1].ToString() + " Spiele";
                <tr>
                  <td align="right">@sSp</td>
                </tr>
              }
              if (player.iSuspension[2] + player.iSuspension[3] > 0) {
                string sSp = "Int: " + (player.iSuspension[2] + player.iSuspension[3]).ToString() + " Spiele";
                <tr>
                  <td align="right">@sSp</td>
                </tr>
              }
              if (player.iSuspension[4] > 0) {
                string sSp = "Testspiele: " + player.iSuspension[4].ToString() + " Spiele";
                <tr>
                  <td align="right">@sSp</td>
                </tr>
              }
              if (player.iSuspension[6] > 0) {
                string sSp = "Nat: " + player.iSuspension[6].ToString() + " Spiele";
                <tr>
                  <td align="right">@sSp</td>
                </tr>
              }
            }
          }
        </tbody>
      </table>
    </div>

    <div style="position: relative; width: 40px; height: auto; float: left; text-align: right">
      @if (Model.bCaptain) {
        <img src="/Content/Icons/captain.png" alt="Kapitän" title="Kapitän" style="position: relative; width: 24px; margin-bottom: 4px" />
      } else if (Model.bCaptain2) {
        <img src="/Content/Icons/captain2.png" alt="Vize-Kapitän" title="Vize-Kapitän" style="position: relative; width: 24px; margin-bottom: 4px" />
      }

      @{
        string sNat = MvcApplication.ckcore.sLandShort[player.iNat1];

        if (string.IsNullOrEmpty(sNat)) {
          <img src="/Content/Icons/flags/0.png" alt="unbekannt" title="unbekannt" style="position: relative; width: 24px; margin-bottom: 4px" />
        } else {
          string sFlag = "/Content/Icons/flags/" + sNat + ".png";
          <img src=@sFlag alt=@sNat title=@sNat style="position: relative; width: 24px; margin-bottom: 4px" />
        }
      }
    </div>

    <div id="divChartCFM" style="position: relative; height: 250px; width: 300px; margin-left: 10px; margin-bottom: 10px; float: left"></div>
  </div>

  @{
    if (Model.bOwnPlayer && !Model.bNation) {
      string sExtendContract = "Vertrag verlängern";
      if (Model.bJouth) {
        sExtendContract = "Profivertrag aushandeln";
      }

      <div style="position: relative; width: 320px; height: 100%; float: left; margin-top: 6px; text-align: center">
        @* Extend player contract *@
        <button type="submit" id="bnContract" class="btn btn-default" style="width: 100%; margin-bottom: 4px">@sExtendContract</button>

        @* Put on / take from transferlist *@
        @if (MvcApplication.ckcore.plr.onTransferlist(player)) {
          <button type="submit" id="bnTakeFromTransfer" class="btn btn-default" style="width: 100%; margin-bottom: 8px">Von Transferliste nehmen</button>
        } else {
          <button type="submit" id="bnPutOnTransfer" class="btn btn-default" style="width: 100%; margin-bottom: 8px">Auf Transferliste setzen</button>
        }

        @if (!Model.bJouth) {
          if (!Model.bCaptain) {
            <button type="submit" id="bnCaptain" class="btn btn-default" style="width: 100%; margin-bottom: 4px">Zum Kapitän machen</button>
          }

          if (!Model.bCaptain2) {
            <button type="submit" id="bnCaptain2" class="btn btn-default" style="width: 100%; margin-bottom: 4px">Zum Vize-Kapitän machen</button>
          }

          <button type="submit" id="bnDoping" class="btn btn-default" style="width: 100%; margin-top: 4px">Spieler dopen</button>
        }
      </div>
    }
  }

  <div id="divChartDevelopment" style="position: relative; height: 220px; width: 50%; min-width: 320px; margin-bottom: 10px; float: left"></div>

  <div style="position: relative; width: 100%; height: 1000px; float: left; margin-top: 10px">
    <div style="position: relative; width: auto; height: auto; float: left; margin-bottom: 2%; margin-right: 2%">
      <table border="1" cellpadding="4" style="width: auto">
        <thead>
          <tr>
            <th style="text-align:center">Fähigkeit</th>
            <th>Wert</th>
            @{
              if (Model.bOwnPlayer) {
                <th>Training</th>
                <th>Ind.</th>
                <th>Bonus</th>
              }
            }
          </tr>
        </thead>
        <tbody>
          @for (int i = 0; i < player.iSkill.Length; i++) {
            var fTraining = player.fSkillTraining[i] + 1.0;
            <tr>
              <td align="right">@MvcApplication.ckcore.plr.sSkills[i]</td>
              <td align="center">@player.iSkill[i]</td>
              @{
                if (Model.bOwnPlayer) {
                  <td align="right">@fTraining.ToString("0.0%")</td>
                  <td align="center">@Html.RadioButtonFor(m => m.iPlayerIndTr, i, new { @onchange = "setIndTraining(" + i.ToString() + ")", id = "rB" + i.ToString() })</td>
                  <td align="right">@player.fIndTraining[i].ToString("0.0%")</td>
                }
              }
            </tr>
          }
        </tbody>
      </table>
    </div>

    <div style="position: relative; width: auto; height: auto; float: left; margin-bottom: 2%; margin-right: 2%">
      <table border="1" cellpadding="4" style="width: auto">
        <thead>
          <tr>
            <th style="text-align:center">Position</th>
            <th style="text-align:center">Wert</th>
            <th style="text-align:center">Stärke</th>
          </tr>
        </thead>
        <tbody>
          @for (byte i = 0; i < player.fExperiencePos.Length; i++) {
            byte j = (byte)(i + 1);

            string sColor = "";
            string sBold = "";
            if (player.fExperiencePos[i] > 0.99) {
              sBold = "style=font-weight:bold";
            } else if (player.fExperiencePos[i] > 0.8) {
              sColor = "style=color:blue";
            }
            <tr @sBold>
              <td align="center">@MvcApplication.ckcore.sPosition[i + 1]</td>
              <td align="right"><span @sColor>@player.fExperiencePos[i].ToString("0.0%")</span></td>
              <td align="center">@MvcApplication.ckcore.game.tl.getAveSkill(player, j, true).ToString("0.0")</td>
            </tr>
          }
        </tbody>
      </table>
    </div>

    <div style="position: relative; width: auto; height: auto; float: left">
      <table id="tblStatistic" border="1" cellpadding="4" style="width: auto">
        <thead>
          <tr>
            <th align="center">
              <label>
                Saison
                <input name="rBStatistic" id="rBStatisticSeason" onchange="drawStatistic(0)" type="radio" checked="checked" value="0">
              </label>
              <label>
                Total
                <input name="rBStatistic" id="rBStatisticTotal" onchange="drawStatistic(1)" type="radio" value="1">
              </label>
            </th>
            <th align="center">Liga</th>
            <th align="center">Pokal</th>
            <th align="center">Int.</th>
            <th align="center">Nat.</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>
</div>

<div id="dialogContract" title="Vertrag verlängern">
  <div style="position: relative; width: 100%; height: 40px" class="form-group">
    <div style="position: absolute; width: 48%; height: auto; top: 10px" align="right">
      <b class="left">Laufzeit [a]: </b>
    </div>
    <div style="position: absolute; width: 48%; left: 52%" align="left">
      @Html.EditorFor(Model => Model.iContractYears, new { htmlAttributes = new { @class = "form-control tbContractYears", @type = "number", @min = "1", @max = "10", @step = "1", @value = "1", @style = "text-align: right; width:60px", @autocomplete = "off" } })
    </div>
  </div>
  <div style="position: relative; height: 90px">
    <div style="position: absolute; width: 45%" align="center">
      <b>Gefordertes Gehalt:</b>
      <p id="txtContractMoney"></p>
    </div>
    <div style="position: absolute; left: 55%; width: 45%" class="form-group">
      <div style="position: absolute; width: 100%; height: auto; top: 0px" align="center">
        <b class="left">Gebotenes Gehalt:</b>
      </div>
      <div style="position: absolute; width: 100%; top: 20px" align="right">
        @Html.EditorFor(Model => Model.iContractSalaryOffer, new { htmlAttributes = new { @id = "tbContractSalaryOffer", @class = "form-control tbContractSalaryOffer", @type = "tel", @min = "0", @step = "1000", @value = "0", @style = "text-align: right; width:100%", @autocomplete = "off" } })
      </div>
    </div>
    <div style="position: absolute; width: 45%; top: 40px" align="center">
      <b>Stimmung:</b>
      <p id="txtContractMood"></p>
    </div>
  </div>
  <button type="submit" id="bnNegotiate" class="btn btn-default" style="width: 100%">verhandeln</button>
</div>

<div id="dialogCaptain" title="Bitte bestätigen...">
  <p id="txtCaptain"></p>
</div>

<div id="dialogDoping" title="Spieler dopen">
  <div style="position: relative; width: 100%; height: 40px" class="form-group">
    <div style="position: absolute; width: 35%; height: auto; top: 10px" class="form-group">
      <b class="left">Dopingmittel:</b>
    </div>
    <div style="position: absolute; width: 65%; left: 35%" class="col-md-10">
      @Html.DropDownListFor(m => m.iDp, new SelectList(Model.ddlDoping, "Value", "Text", Model.iDp), /* "--Select One--",*/ new { @class = "form-control", @onchange = "setDopingDesc()", id = "ddlDoping", style = "width: 100%" })
    </div>
  </div>
  <div style="position: relative" class="form-group">
    <b>Eigenschaften:</b>
    <p id="txtDialogDoping"></p>
  </div>
</div>
