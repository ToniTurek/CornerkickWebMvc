@model CornerkickWebMvc.Models.AdminModel

@{
  ViewBag.Title = "Settings";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
  var sDir = "";
  $(document).ready(function () {
    setFileExplorer();

    showUnfinishedGames();

    $("#bnSetWeeks1").click(function () {
      setCalInterval(1);
    });

    $("#bnSetWeeks2").click(function () {
      setCalInterval(2);
    });

    $('#iSelectedClubAdmin').change(function () {
      $.ajax({
        url: '/Admin/SetAdminClub',
        type: "GET",
        dataType: "JSON",
        cache: false,
        contentType: "application/json; charset=utf-8",
        data: { iClubIx: $(this).val() }
      });
    });

    $("#bEmailCertification").change(function () {
      setSettings();
    });

    $("#bRegisterDuringGame").change(function () {
      setSettings();
    });

    $("#bLoginPossible").change(function () {
      setSettings();
    });

    $("#bMaintenance").change(function () {
      setSettings();
    });
  });

  function setSettings() {
    var bEmailCertification = document.getElementById("bEmailCertification").checked;
    var bRegisterDuringGame = document.getElementById("bRegisterDuringGame").checked;
    var bLoginPossible = document.getElementById("bLoginPossible").checked;
    var bMaintenance = document.getElementById("bMaintenance").checked;

    $.ajax({
      url: '/Admin/setSettings',
      type: "GET",
      dataType: "JSON",
      cache: false,
      contentType: "application/json; charset=utf-8",
      data: { bEmailCertification: bEmailCertification, bRegisterDuringGame: bRegisterDuringGame, bLoginPossible: bLoginPossible, bMaintenance: bMaintenance }
    });
  }

  function setCalInterval(iWeeks) {
    // Capital letters = Real-time
    //              MIN * S  * H   /   weeks * qu  * h  * d
    var fInterval = (60 * 60 * 24) / (iWeeks * 4.0 * 24 * 7);
    document.getElementById('fCalendarInterval').value = fInterval;
  }

  function changeDir() {
    sDir = document.getElementById('itCd').value;
    setFileExplorer();
  }

  function setFileExplorer() {
    $.ajax({
      url: '/Admin/getFilesInDirectory',
      type: "GET",
      dataType: "JSON",
      data: { sDir: sDir },
      success: function (sContent) {
        document.getElementById('itCurDir').value = sDir;

        $("#divFileExplorer").html(setFileExplorerTable(sContent)).show();
      }
    });
  }

  function setFileExplorerTable(sContent) {
    var sBox = '';
    sBox += '<table id="tableFileExplorer" style="width: 100%; background-color: black; color: white">';

    sNsplit = sContent.split('\n');
    for (var i = 0; i < sNsplit.length; i++) {
      sN = sNsplit[i];

      sN = sN.replace("<", "&lt;");
      sN = sN.replace(">", "&gt;");

      sBox += '<tr>';
      sBox += '<td>' + sN + '</td>';
      sBox += '</tr>';
    }

    sBox += '</table>';

    return sBox;
  }

  function showUnfinishedGames() {
    $.ajax({
      url: '/Admin/GetUnfinishedGames',
      type: "GET",
      dataType: "JSON",
      success: function (ret) {
        if (ret) {
          if (ret.games) {
            var tblUg = document.getElementById("tblUg").getElementsByTagName("tbody")[0];

            // Clear table body
            tblUg.innerHTML = '';

            // Loop over all games
            for (var iUg = 0; iUg < ret.games.length; iUg++) {
              let ug = ret.games[iUg];

              let rowUg = tblUg.insertRow(-1);

              rowUg.insertCell(-1).innerText = ug.sCupName;
              rowUg.insertCell(-1).innerText = ug.iMd;
              rowUg.insertCell(-1).innerText = ug.sClubNameH;
              rowUg.insertCell(-1).innerText = ug.sClubNameA;

              let iptGoalsH = document.createElement("input");
              iptGoalsH.type = "tel";
              iptGoalsH.value = -1;
              iptGoalsH.style.width = "40px";
              rowUg.insertCell(-1).appendChild(iptGoalsH);

              let iptGoalsA = document.createElement("input");
              iptGoalsA.type = "tel";
              iptGoalsA.value = -1;
              iptGoalsA.style.width = "40px";
              rowUg.insertCell(-1).appendChild(iptGoalsA);

              let iptSetResult = document.createElement("input");
              iptSetResult.type = "button";
              iptSetResult.value = "set";
              iptSetResult.style.width = "40px";
              iptSetResult.addEventListener("click", function () {
                setUnfinishedGameResult(ug.iCupId1, ug.iCupId2, ug.iCupId3, ug.iMd, ug.iClubIdH, ug.iClubIdA, iptGoalsH, iptGoalsA);
              });
              rowUg.insertCell(-1).appendChild(iptSetResult);
            }
          }
        }
      }
    });
  }

  function setUnfinishedGameResult(iCupId1, iCupId2, iCupId3, iMd, iClubIdH, iClubIdA, iptGoalsH, iptGoalsA) {
    $.ajax({
      url: '/Admin/setUnfinishedGameResult',
      type: "GET",
      dataType: "JSON",
      data: { iCupId1: iCupId1, iCupId2: iCupId2, iCupId3: iCupId3, iMd: iMd, iClubIdH: iClubIdH, iClubIdA: iClubIdA, iGoalsH: iptGoalsH.value, iGoalsA: parseInt(iptGoalsA.value) },
      success: function (ret) {
        if (ret) {
          if (ret.result) {
            if (ret.result == "OK") {
              showUnfinishedGames();
            } else if (ret.Message) {
              alert(ret.Message);
            }
          }
        }
      }
    });
  }
</script>

@Html.ActionLink("Log", "Log", "Admin")

<h2>Settings</h2>
@{
  string sDtNow = DateTime.Now.ToString();
  bool bCk = true;
  bool bTimer = false;
  bool bTimerSave = false;
  string sInterval = "";
  string sHour = "";
  if (Model != null) {
    bCk = Model.bCk;
    bTimer = Model.bTimer;
    bTimerSave = Model.bTimerSave;
    sInterval = Model.fCalendarInterval.ToString() + " s";
    sHour = Model.sStartHour;
  }
}

<div style="position: relative; width: 50%; min-width: 300px; height: 70px">
  @using (Html.BeginForm("StartCalendar", "Admin", FormMethod.Post)) {
    @Html.TextBoxFor(m => m.fCalendarInterval, new { autocomplete = "off", autofocus = "autofocus", style = "width: 33%" })
    @Html.TextBoxFor(m => m.sStartHour, new { autocomplete = "off", style = "width: 33%" })
    @Html.TextBoxFor(m => m.iGameSpeed, new { autocomplete = "off", style = "width: 33%" })

    <p></p>
    if (bTimer) {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; top: 30px">Update</button>
    } else {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; top: 30px">Start</button>
    }
  }

  @using (Html.BeginForm("StopCalendar", "Admin", FormMethod.Post)) {
    <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; top: 30px; left: 184px">Stop</button>
  }

  @using (Html.BeginForm("OneStep", "Admin", FormMethod.Post)) {
    <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; top: 30px; left: 368px">Next</button>
  }
</div>

<button type="submit" id="bnSetWeeks1" class="btn btn-default" style="position: relative; width: 180px">1 Day -> 1 Week</button>
<button type="submit" id="bnSetWeeks2" class="btn btn-default" style="position: relative; width: 180px">1 Day -> 2 Weeks</button>

<p></p>
<text>System time: @sDtNow<br></text>
<text>running: @bCk.ToString()<br></text>
<text>timer: @bTimer.ToString()<br></text>
<text>interval: @sInterval<br></text>
<text>hour: @sHour<br></text>
<text>save timer: @bTimerSave.ToString()<br></text>
<text>No. of Teams: @Model.nClubs<br></text>
<text>No. of User: @Model.nUser<br></text>
<text>No. of Player: @Model.nPlayer<br></text>
<text>Current ck date: @Model.dtCkCurrent<br></text>
<text>Approach ck date: @Model.dtCkApproach<br></text>
<text>Approach interval: @Model.fIntervalAveToApproachTarget.ToString("0.000000")<br></text>

<label>
  @Html.CheckBoxFor(m => m.bEmailCertification)
  Email Certification
</label>

<label>
  @Html.CheckBoxFor(m => m.bRegisterDuringGame)
  Register during game
</label>

<label>
  @Html.CheckBoxFor(m => m.bLoginPossible)
  Login possible
</label>

<label>
  @Html.CheckBoxFor(m => m.bMaintenance)
  Maintenance
</label>

@using (Html.BeginForm("RestartCk", "Admin", FormMethod.Post)) {
  <button type="submit" class="btn btn-default" style="position: relative; width: 180px">Restart Cornerkick</button>
}

<div style="position: relative; width: 50%; min-width: 300px; height: 75px; margin-top: 10px">
  @using (Html.BeginForm("DeleteLog", "Admin", FormMethod.Post)) {
    if (Model.bLogExist) {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px">delete Log</button>
    } else {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px" disabled>delete Log</button>
    }
  }

  @using (Html.BeginForm("DeleteSaveFolder", "Admin", FormMethod.Post)) {
    if (Model.bSaveDirExist) {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px">delete save folder</button>
    } else {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px" disabled>delete save folder</button>
    }
  }
</div>

<div style="position: relative; width: 50%; min-width: 300px; height: 40px">
  @using (Html.BeginForm("SaveAutosave", "Admin", FormMethod.Post)) {
    <button type="submit" class="btn btn-default" style="position: absolute; width: 180px">save autosave</button>
  }

  @using (Html.BeginForm("DeleteAutosave", "Admin", FormMethod.Post)) {
    if (Model.bAutosaveExist) {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px">delete autosave</button>
    } else {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px" disabled>delete autosave</button>
    }
  }
</div>

<div style="position: relative; width: 50%; min-width: 300px; height: 40px">
  @using (Html.BeginForm("LoadAutosave", "Admin", FormMethod.Post)) {
    @Html.DropDownListFor(m => m.sSelectedAutosaveFile, Model.ddlAutosaveFiles, new { @class = "form-control", style = "position: absolute; width: 180px" })

    if (Model.bAutosaveExist) {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px">load autosave</button>
    } else {
      <button type="submit" class="btn btn-default" style="position: absolute; width: 180px; left: 184px" disabled>load autosave</button>
    }
  }
</div>

<div style="position: relative; width: 50%; min-width: 300px; height: 40px">
  @Html.DropDownListFor(m => m.iSelectedClubAdmin, Model.ddlClubsAdmin, new { @class = "form-control", style = "position: absolute; width: 180px" })
</div>


<h3>Unfinished games</h3>
<table id="tblUg" border="1">
  <thead>
    <tr>
      <th>Wettbewerb</th>
      <th>Md</th>
      <th>Club home</th>
      <th>Club away</th>
      <th>Goals H</th>
      <th>Goals A</th>
      <th></th>
    </tr>
  </thead>
  <tbody></tbody>
</table>

@{
  string sMapPath = Server.MapPath("~");
}
<h3>File Explorer</h3>
<text>Home Dir 1: @Model.sHomeDir<br></text>
<text>Home Dir 2: @Model.sHomeDirCk<br></text>
<text id="txtCurDir">Current Dir: </text>
<input id="itCurDir" style="width: 30%" type="text" readonly>

<p></p>
<input id="itCd" style="width: 30%" type="text" autocomplete="off">
<button id="bnCd" type="submit" class="btn btn-default" onclick="changeDir();">Change Dir</button>
<div id="divFileExplorer"></div>
