@model CornerkickWebMvc.Models.ViewGameModel

@{
  ViewBag.Title = "Livespiel";
  Layout = "~/Views/Shared/_Layout_plain.cshtml";
}

<html style="height: 100%; min-height: 100%">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <style>
    #slider {
      margin: 10px;
    }

    .ui-slider-horizontal {
      height: 20px;
      width: 100%;
    }

    .ui-slider .ui-slider-handle {
      height: 26px;
      width: 10px;
      padding-left: 0px;
    }

    #slider-Minute .ui-slider-range {
      background: orange;
    }

    #slider-Minute .ui-slider-handle {
      border-color: orange;
    }

    .disabledDiv {
      pointer-events: none;
    }
  </style>

  <script type="text/javascript">
    var bStopPlay = false;
    var bAdminStop = true;

    var ltF = [];
    //var ltM = [];
    var chartF;
    //var chartM;

    var i = 0;
    for (i = 0; i < 11; ++i) {
      ltF[i] = [];
      //ltM[i] = [];
    }

    var tblTeamViewGame;
  </script>

  <link href="~/Content/DataTables/css/jquery.dataTables.min.css" rel="stylesheet" />

  <script type="text/javascript" src="~/Scripts/jquery-2.0.0.js"></script>
  <script type="text/javascript" src="~/Scripts/jquery-ui-1.12.1.js"></script>
  <script type="text/javascript" src="~/Scripts/flot/jquery.flot.min.js"></script>
  <script type="text/javascript" src="~/Scripts/flot/jquery.flot.stack.js"></script>
  <!--[if lte IE 8]><script language="javascript" type="text/javascript" src="/js/flot/excanvas.min.js"></script><![endif]-->
  <script type="text/javascript" src="~/Scripts/DataTables/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="~/Scripts/canvasjs.min.js"></script>
  <script type="text/javascript" src="~/Scripts/draw.js"></script>
  <script type="text/javascript" src="~/Scripts/Player.js"></script>
  <script type="text/javascript" src="~/Scripts/ViewGame.js"></script>

  <script type="text/javascript">
    var iColorH = 0;
    var iColorA = 0;
    var sColorJerseyH;
    var sColorJerseyA;

    $(window).resize(function () {
      setView();
    });

    $(document).ready(function () {
      // Admin
      bnAdminPlay = document.getElementById("bnAdminPlay");
      bnAdminNext = document.getElementById("bnAdminNext");

      var ddlPositions = $('#ddlPositions');
      var ddlHeatmap   = $('#ddlHeatmap');
      var ddlShoots    = $('#ddlShoots');
      var ddlDuels     = $('#ddlDuels');
      var ddlPasses    = $('#ddlPasses');

      $("a#aOptions").click(function (e) {
        e.preventDefault();
        $("#dialogOptions").dialog("open");
      });

      $("a#aAdminOptions").click(function (e) {
        e.preventDefault();
        $("#dialogAdminOptions").dialog("open");
      });

      setView();

      var iGameSpeed = @Html.Raw(Json.Encode(Model.iGameSpeed));
      var bOwnLiveGame = @Html.Raw(Json.Encode(Model.bOwnLiveGame));

      drawGame(-3, iGameSpeed);

      pMainSlider = $('#slider-Minute');

      //$("#slider-Minute").slider("option", "max", 1000);

      pMainSlider.slider({
        range: "min",
        min: 0,
        max: @Model.gD.nStates,
        step: 1,
        value: @Model.gD.nStates,
        slide: function (event, ui) {
          bStopPlay = true;

          var iStep = ui.value;
          drawGame(iStep, -1);
        }
      });

      $("#bnStart").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        drawGame(0, 300);
      });

      $("#bnBackFast").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        var iStatePlay = $('#slider-Minute').slider("value");
        if (iStatePlay > 9) {
          drawGame(iStatePlay - 10, -1);
        }
      });

      $("#bnBack").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        var iStatePlay = $('#slider-Minute').slider("value");
        if (iStatePlay > 0) {
          drawGame(iStatePlay - 1, -1);
        }
      });

      $("#bnPlay").click(function () {
        if (bStopPlay) {
          var iStatePlay = $('#slider-Minute').slider("value");
          bStopPlay = false;
          bnPlay.innerText = "◼";

          play(iStatePlay);
        } else {
          bStopPlay = true;
          bnPlay.innerText = '►';
        }
      });

      $("#bnForth").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        var iStatePlay = $('#slider-Minute').slider("value");
        if (iStatePlay < $("#slider-Minute").slider("option", "max") - 1) {
          drawGame(iStatePlay + 1, -1);
        }
      });

      $("#bnForthFast").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        var iStatePlay = $('#slider-Minute').slider("value");
        if (iStatePlay < $("#slider-Minute").slider("option", "max") - 10) {
          drawGame(iStatePlay + 10, -1);
        }
      });

      $("#bnEnd").click(function () {
        bStopPlay = true;
        bnPlay.innerText = '►';

        drawGame($("#slider-Minute").slider("option", "max") - 1, -1);
      });

      $("#bnAdminPlay").click(function () {
        if (bAdminStop) {
          bAdminStop = false;
          bnAdminPlay.innerText = "◼";

          playAdmin();
        } else {
          bAdminStop = true;
          bnAdminPlay.innerText = '►';
        }
      });

      $("#bnAdminNext").click(function () {
        bAdminStop = true;
        bnAdminPlay.innerText = '►';

        var iNextAction = document.getElementById("ddlAdminNextAction").value;
        var iX = document.getElementById("inputAdminSetPosX").value;
        var iY = document.getElementById("inputAdminSetPosY").value;

        $.ajax({
          url: '/ViewGame/AdminNext',
          type: "GET",
          dataType: "JSON",
          data: { iNextAction: iNextAction, iX: iX, iY: iY },
          success: function () {
            drawGame(-4, -1);
            getPlayerChancesAdmin();
          }
        });
      });

      $("#bnAdminNew").click(function () {
        bAdminStop = true;
        bnAdminPlay.innerText = '►';

        $.ajax({
          url: '/ViewGame/AdminNew',
          type: "GET",
          dataType: "JSON",
          success: function () {
            drawGame(-3, -1);
          }
        });
      });

      // Admin options
      $("#bnAdminSetPos").click(function () {
        var iHA = document.getElementById("ddlAdminSetPosHA").value;
        var iPl = document.getElementById("ddlAdminSetPosPl").value;
        var iX = document.getElementById("inputAdminSetPosX").value;
        var iY = document.getElementById("inputAdminSetPosY").value;
        $.ajax({
          url: '/ViewGame/AdminSetPos',
          type: "GET",
          dataType: "JSON",
          data: { iHA: iHA, iPl: iPl, iX: iX, iY: iY },
          success: function () {
            drawGame(-4, -1);
          }
        });
      });

      $("#itAdminReferee").keyup(function () {
        $.ajax({
          url: '/ViewGame/AdminSetReferee',
          type: "GET",
          dataType: "JSON",
          data: { fReferee: $(this).val() },
          success: function () {
            drawGame(-4, -1);
          }
        });
      });

      $("#slrAdminShootDist").slider({
        range: "min",
        value: 0,
        min: -100,
        max: +100,
        step: 10,
        slide: function (event, ui) {
          document.getElementById("itShootDist").value = -ui.value;

          $.ajax({
            url: '/ViewGame/AdminSetTaktik',
            type: "GET",
            dataType: "JSON",
            data: { iTaktik: 2, fTaktik: -parseFloat(ui.value) / 100 },
            success: function (fTaktik) {
              getPlayerChancesAdmin();
            }
          });
        }
      });

      // List team
      if (bOwnLiveGame) {
        tblTeamViewGame = $('#tableTeamViewGame').DataTable({
          "ajax": {
            "url": '@Url.Action("getTableTeam", "Member")',
            "type": 'GET',
            "dataType": "JSON",
            "cache": false,
            "contentType": "application/json; charset=utf-8",
            "data": function (d) {
              return $.extend({}, d, {
                "iPlayerMax": 11,
              });
            }
          },
          "columns": [
            { "data": "iIndex" },
            { "data": "sID" },
            { "data": "bSubstituted" },
            { "data": "sNr" },
            { "data": "sName" },
            { "data": "sPosition" },
            { "data": "sStaerke" },
            { "data": "sKondi" },
            { "data": "sFrische" },
            { "data": "sMoral" },
            { "data": "sErf" },
            {
              "data": "sForm",
              "render": function (sForm, type, row) {
                return getFormIcon(sForm);
              }
            },
            { "data": "sLeader" },
            { "data": "sGrade" },
            { "data": "sAlter" },
            { "data": "sTalent" },
            { "data": "sStaerkeIdeal" },
            { "data": "sCaptain" },
            { "data": "iMarktwert" },
            { "data": "iGehalt" },
            { "data": "sLz" },
            {
              "data": "sNat",
              "render": function (sNat, type, row) {
                return getNatIcon(sNat);
              }
            },
            { "data": "iSuspended" }
          ],
          rowReorder: {
            dataSrc: 'iIndex'
          },
          "pageLength": 50,
          "paging": false,
          "info": false,
          "responsive": true,
          "searching": false,
          columnDefs: [
            {
              targets: [1, 2, 16, 18, 19, 20, 22], // sID, bSubstituted, sStaerkeIdeal, sMarktwert, sGehalt, iSuspended
              "orderable": false,
              "visible": false,
              "searchable": false
            },
            { targets: [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "className": "dt-center" }
          ],
          select: true,
          select: {
            selector: 'tr',
            style: 'os'
          },
          "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            if (aData.iIndex % 2 == 0) {
              $('td', nRow).css('background-color', "rgb(235,255,235)");
            } else {
              $('td', nRow).css('background-color', "rgb(245,255,245)");
            }
            $('td', nRow).eq(0).css('background-color', "rgb(210,230,188)");

            // Highlight cards
            if (aData.iSuspended < 0) { // Player has yellow card -->
              $('td', nRow).css('color', "rgb(220,140,0)"); // --> text color yellow
            } else if (aData.iSuspended > 0) { // Player has red card -->
              $('td', nRow).css('color', "rgb(255,0,0)"); // --> text color red
            }
          }
        });

        // Fresh/Moral chart
        CanvasJS.addColorSet("csF", [
          "rgba(0,0,130,1.0)",
          "rgba(0,0,155,1.0)",
          "rgba(0,0,180,1.0)",
          "rgba(0,0,205,1.0)",
          "rgba(0,0,230,1.0)",
          "rgba(0,0,255,1.0)",
          "rgba(25,25,255,1.0)",
          "rgba(50,50,255,1.0)",
          "rgba(75,75,255,1.0)",
          "rgba(100,100,255,1.0)",
          "rgba(125,125,255,1.0)"]
        );

        chartF = new CanvasJS.Chart("chartContainerF", {
          colorSet: "colorSet3",
          animationEnabled: false,
          theme: "theme2",//theme1
          title: {
            text: "Frische",
            fontSize: 18
          },
          axisX: {
            labelFontColor: "white",
            gridThickness: 1
          },
          axisY: {
            valueFormatString: "0.0%",
            maximum: 1,
            includeZero: false
          },
          legend: {
            horizontalAlign: "center", // left, center, right
            verticalAlign: "bottom",  // top, center, bottom
            dockInsidePlotArea: true
          },
          toolTip: {
            content: "{name}: {y}"
          },
          data: [{
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "1",
            yValueFormatString: "0.0%",
            dataPoints: ltF[0]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "2",
            yValueFormatString: "0.0%",
            dataPoints: ltF[1]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "3",
            yValueFormatString: "0.0%",
            dataPoints: ltF[2]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "4",
            yValueFormatString: "0.0%",
            dataPoints: ltF[3]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "5",
            yValueFormatString: "0.0%",
            dataPoints: ltF[4]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "6",
            yValueFormatString: "0.0%",
            dataPoints: ltF[5]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "7",
            yValueFormatString: "0.0%",
            dataPoints: ltF[6]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "8",
            yValueFormatString: "0.0%",
            dataPoints: ltF[7]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "9",
            yValueFormatString: "0.0%",
            dataPoints: ltF[8]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "10",
            yValueFormatString: "0.0%",
            dataPoints: ltF[9]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "11",
            yValueFormatString: "0.0%",
            dataPoints: ltF[10]
          }]
        });

        //chartF.render();

        /*
        chartM = new CanvasJS.Chart("chartContainerM", {
          colorSet: "colorSet3",
          animationEnabled: false,
          theme: "theme2",//theme1
          title: {
            text: "Moral",
            fontSize: 18
          },
          axisX: {
            labelFontColor: "white",
            gridThickness: 1
          },
          axisY: {
            valueFormatString: "0.0%",
            includeZero: false
          },
          legend: {
            horizontalAlign: "center", // left, center, right
            verticalAlign: "bottom",  // top, center, bottom
            dockInsidePlotArea: true
          },
          toolTip: {
            content: "{name}: {y}"
          },
          data: [{
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "1",
            yValueFormatString: "0.0%",
            dataPoints: ltM[0]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "2",
            yValueFormatString: "0.0%",
            dataPoints: ltM[1]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "3",
            yValueFormatString: "0.0%",
            dataPoints: ltM[2]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "4",
            yValueFormatString: "0.0%",
            dataPoints: ltM[3]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "5",
            yValueFormatString: "0.0%",
            dataPoints: ltM[4]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "6",
            yValueFormatString: "0.0%",
            dataPoints: ltM[5]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "7",
            yValueFormatString: "0.0%",
            dataPoints: ltM[6]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "8",
            yValueFormatString: "0.0%",
            dataPoints: ltM[7]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "9",
            yValueFormatString: "0.0%",
            dataPoints: ltM[8]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "10",
            yValueFormatString: "0.0%",
            dataPoints: ltM[9]
          },
          {
            // Change type to "bar", "splineArea", "area", "spline", "pie",etc.
            showInLegend: true,
            type: "line",
            name: "11",
            yValueFormatString: "0.0%",
            dataPoints: ltM[10]
          }]
        });
        */
      } // if (bOwnLiveGame)

      // Dialogs
      $("#dialogOptions").dialog({
          autoOpen: false,
          height: 290,
          width: 260
      });

      $("#dialogPlAction").dialog({
        autoOpen: false,
        height: 202,
        width: 170
      });

      $("#dialogAdminOptions").dialog({
        autoOpen: false,
        height: 300,
        width: 280
      });

      ddlHeatmap.change(function () {
        plotStatistics(pMainSlider.slider("value"));
      });

      ddlShoots.change(function () {
        plotStatistics(pMainSlider.slider("value"));
      });

      ddlDuels.change(function () {
        plotStatistics(pMainSlider.slider("value"));
      });

      ddlPasses.change(function () {
        plotStatistics(pMainSlider.slider("value"));
      });

      ddlPositions.change(function () {
        drawGame(pMainSlider.slider("value"));
      });

      $('#sSelectedGame').change(function () {
        $("body").css("cursor", "wait");
        $("#divDrawGameContainer").addClass("disabledDiv");

        $.ajax({
          url: '/ViewGame/loadGame',
          type: "GET",
          dataType: "JSON",
          data: { sFilename: $(this).val() },
          success: function () {
            drawGame(-3);
            $("body").css("cursor", "default");
            $("#divDrawGameContainer").removeClass("disabledDiv");
          }
        });
      });
    }); // $(document).ready(function () {});

    function changeJerseyColors(iHA, divJersey) {
      if (iHA === 0) {
        if (iColorH === 1) {
          divJersey.style.backgroundColor = sColorJerseyH[0];
          divJersey.style.borderColor     = sColorJerseyH[1];
          divJersey.style.color           = sColorJerseyH[2];
        } else {
          divJersey.style.backgroundColor = sColorJerseyH[3];
          divJersey.style.borderColor     = sColorJerseyH[4];
          divJersey.style.color           = sColorJerseyH[5];
        }

        iColorH = 1 - iColorH;
      } else if (iHA === 1) {
        if (iColorA === 0) {
          divJersey.style.backgroundColor = sColorJerseyA[0];
          divJersey.style.borderColor     = sColorJerseyA[1];
          divJersey.style.color           = sColorJerseyA[2];
        } else {
          divJersey.style.backgroundColor = sColorJerseyA[3];
          divJersey.style.borderColor     = sColorJerseyA[4];
          divJersey.style.color           = sColorJerseyA[5];
        }

        iColorA = 1 - iColorA;
      }

      changePlayerJerseyColor(iHA, divJersey.style.backgroundColor, divJersey.style.borderColor, divJersey.style.color);
    }

    function playAdmin() {
      if (bAdminStop === true) return;

      var iAdminGameSpeed = document.getElementById("inputAdminGameSpeed").value;

      if (iAdminGameSpeed >= 0) {
        $.ajax({
          url: '/ViewGame/AdminNext',
          type: "GET",
          dataType: "JSON",
          data: { iNextAction: -1 },
          success: function () {
            $.when(drawGame(-2)).done(function () {
              setTimeout(function () { playAdmin() }, iAdminGameSpeed);
            });
          }
        });
      }
    }

    function getPlayerChancesAdmin() {
      $.ajax({
        url: '/ViewGame/AdminGetPlayerChances',
        type: "GET",
        dataType: "JSON",
        success: function (fPlAction) {
          drawPlayerChances(fPlAction, 0);
        }
      });
    }

    function openDialogChances(bChecked) {
      if (bChecked) {
        document.getElementById("divPlActionChart").style.display = "block";
      } else {
        document.getElementById("divPlActionChart").style.display = "none";
      }

      document.getElementById("bShowChances").checked = bChecked;
    }

    function setView() {
      var divDrawGameContainer = document.getElementById("divDrawGameContainer");
      var imgGame = document.getElementById("imgGame");
      var divDrawGame = document.getElementById("divDrawGame");
      var divHeader = document.getElementById("divHeader");
      var divTimeline = document.getElementById("divTimeline");

      var divOptions = document.getElementById("divOptions");

      var divPlotStatistics = document.getElementById("divPlotStatistics");
      var divStat1 = document.getElementById("divStat1");
      var divStat2 = document.getElementById("divStat2");
      var divComments = document.getElementById("divComments");
      var divTableViewGame = document.getElementById("divTableViewGame");
      var divChartContainerF = document.getElementById("chartContainerF");
      //var divChartContainerM = document.getElementById("chartContainerM");

      var fWidth = $(window).width();
      if (fWidth < 960 && $(window).height() < fWidth) {
        //requestFullScreen(divDrawGameContainer)
        divHeader.style.display = 'none';
        //divStat1.style.display = 'none';
        divStat2.style.display = 'none';
        //divComments.style.display = 'none';
        divDrawGameContainer.style.position = "absolute";
        divDrawGameContainer.style.top  = "0px";
        divDrawGameContainer.style.left = "0px";
        divDrawGameContainer.style.height = "90%";
        imgGame.style.height = "100%";
        imgGame.style.width = "auto";
        divDrawGameContainer.style.width = imgGame.offsetWidth.toString() + "px";
        divDrawGame.style.width = "90%";

        divComments.style.position = "absolute";
        divComments.style.left = "0px";
        divComments.style.top  = "90%";

        var fInfoLeft = divDrawGameContainer.offsetWidth + 6;
        var fInfoWidth = fWidth - fInfoLeft - 6;

        divTimeline.style.position = "absolute";
        divTimeline.style.top = "0px";
        divTimeline.style.left  = fInfoLeft .toString() + "px";
        divTimeline.style.width = fInfoWidth.toString() + "px";

        if (divOptions) {
          divOptions.style.display = 'none';
        }
        /*
        divOptions.style.position = "absolute";
        divOptions.style.bottom = "50px";
        divOptions.style.left = fInfoLeft.toString() + "px";
        divOptions.style.width = fInfoWidth.toString() + "px";
        divOptions.style.height = "100px";

        txtOptionsHeatmap.innerHTML = "HM:";
        txtOptionsHeatmap.style.left = "0px";
        divOptionsHeatmap.style.left = "30px";
        divOptionsHeatmap.style.top = "0px";

        txtOptionsPos.innerHTML = "Pos:";
        txtOptionsPos.style.top = "44px";
        txtOptionsPos.style.left = "0px";
        divOptionsPos.style.left = "30px";
        divOptionsPos.style.top = "40px";
        */

        divStat1.style.position = "absolute";
        divStat1.style.top   = "50px";
        divStat1.style.left  = fInfoLeft .toString() + "px";
        divStat1.style.width = fInfoWidth.toString() + "px";
        divStat1.style.minWidth = "0px";

        var fCommY = divComments.offsetTop + divComments.offsetHeight;
        divPlotStatistics.style.position = "absolute";
        divPlotStatistics.style.left = "0px";
        divPlotStatistics.style.top = fCommY.toString() + "px";

        var fStatY = divPlotStatistics.offsetTop + divPlotStatistics.offsetHeight;
        divTableViewGame.style.left = "0px";
        divTableViewGame.style.position = "absolute";
        divTableViewGame.style.top = fStatY.toString() + "px";

        var fTableY = divTableViewGame.offsetTop + divTableViewGame.offsetHeight;
        divChartContainerF.style.left = "0px";
        divChartContainerF.style.position = "absolute";
        divChartContainerF.style.top = fTableY.toString() + "px";

        /*
        var fFY = divChartContainerF.offsetTop + divChartContainerF.offsetHeight;
        divChartContainerM.style.left = "0px";
        divChartContainerM.style.position = "absolute";
        divChartContainerM.style.top = fFY.toString() + "px";
        */
      }
      else {
        divHeader.style.display = 'block';

        divTimeline.style.position = "relative";
        divTimeline.style.left  = "0px";
        divTimeline.style.width = "100%";

        if (divOptions) {
          divOptions.style.display = 'block';
        }

        //divStat1.style.display = 'block';
        divStat2.style.display = 'block';
        //divComments.style.display = 'block';
        divDrawGameContainer.style.position = "relative";
        divDrawGameContainer.style.width = "100%";
        divDrawGameContainer.style.height = "auto";
        imgGame.style.width = "100%";
        imgGame.style.height = "auto";
        divComments.style.position = "relative";

        divStat1.style.position = "relative";
        divStat1.style.left = "0%";
        divStat1.style.minWidth = "300px";
      }
    }

    function hideAdressBar() {
      alert("hideAdressBar");
      window.scrollTo(0, 1);
    }
  </script>
</head>

<body onload="setTimeout(function(){ window.scrollTo(0, 1); }, 100)" style="height: 100%; min-height: 100%">
  <input type="hidden" id="bShowChances" name="bShowChances">

  @if (Model.game == null || (Model.game != null && Model.game.data.bFinished) || Model.bAdmin) {
    <div id="divOptions" style="position: relative; left: 0px; width: 100%; height: 40px">
      @Html.DropDownListFor(m => m.sSelectedGame, Model.ddlGames, new { @class = "form-control", style = "position: absolute; width: 165px" })

      @if (Model.bAdmin) {
        <a href="#" id="aAdminOptions" style="position: absolute; top: 0px; right: 0px; color:#000aaa">Admin</a>
      }
    </div>
  }

  <div id="divHeader" style="position: relative; width: 100%; height: 71px; background-color: lightgrey; -webkit-border-radius: 10px; -moz-border-radius: 10px">
    <div style="position: absolute; width: 4%; height: 60%; top: 20%; left: 36%">
      <img id="imgEmblemH" style="position: absolute; height: 100%; right: 0px" alt="" onerror="if (this.src != '/Content/Uploads/emblems/0.png') this.src = '/Content/Uploads/emblems/0.png';" />
    </div>
    <div style="position: absolute; width: 30px; height: 30px; left:  1%; margin-top: 12px">
      <div id="divJerseyH" style="position: relative; width: 30px; height: 30px; border: 2px solid blue; -webkit-border-radius: 50%; -moz-border-radius: 50%; cursor: pointer" onclick="changeJerseyColors(0, this)"></div>
    </div>
    <div style="position: absolute; width: 30%; height: 100%; left: 5%; top: 30%; text-align: right">
      <text id="lbTeamH" style="font-size: 20px"></text>
    </div>

    <div style="position: absolute; width: 20%; height: 100%; left: 40%">
      <div style="position: absolute; width: 35%; height: 100%; left: 0%; text-align: right">
        <text id="lbGoalsH" style="font-size: 48px"></text>
      </div>
      <div style="position: absolute; width: 100%; height: 100%; left: 0px; text-align: center">
        <text style="font-size: 48px">-</text>
      </div>
      <div style="position: absolute; width: 35%; height: 100%; right: 0%; text-align: left">
        <text id="lbGoalsA" style="font-size: 48px"></text>
      </div>
    </div>

    <div style="position: absolute; width: 4%; height: 60%; top: 20%; right: 36%">
      <img id="imgEmblemA" style="position: absolute; height: 100%; left: 0px" alt="" onerror="if (this.src != '/Content/Uploads/emblems/0.png') this.src = '/Content/Uploads/emblems/0.png';" />
    </div>
    <div style="position: absolute; width: 30px; height: 30px; right: 1%; margin-top: 12px">
      <div id="divJerseyA" style="position: relative; width: 30px; height: 30px; border: 2px solid red; -webkit-border-radius: 50%; -moz-border-radius: 50%; cursor: pointer" onclick="changeJerseyColors(1, this)"></div>
    </div>
    <div style="position: absolute; width: 30%; height: 100%; right: 5%; top: 30%; text-align: left">
      <text id="lbTeamA" style="font-size: 20px"></text>
    </div>

    <div style="position: absolute; width: 100%; height: auto; bottom: 0px; left: 0px; text-align: center">
      <text id="lbStadium" style="font-size: 12px"></text>
    </div>
  </div>

  @if (Model.game == null || (Model.game != null && Model.game.data.bFinished) || Model.bAdmin) {
    <div id="divOptions" style="position: relative; float: left; left: 0px; width: 100%; height: 40px; margin-top: 2px">
      @if ((Model.game != null && Model.game.data.bFinished)) {
        <div style="position: relative; float: right; width: 35%; min-width: 320px; height: 40px">
          <button type="submit" id="bnStart" class="btn btn-default" style="position: absolute; left: 3%; width: 13%; height: auto">|<</button>
          <button type="submit" id="bnBackFast" class="btn btn-default" style="position: absolute; left: 17%; width: 13%; height: auto"><<</button>
          <button type="submit" id="bnBack" class="btn btn-default" style="position: absolute; left: 31%; width: 13%; height: auto"><</button>
          <button type="submit" id="bnPlay" class="btn btn-default" style="position: absolute; left: 45%; width: 13%; height: auto">&#9658;</button>
          <button type="submit" id="bnForth" class="btn btn-default" style="position: absolute; left: 59%; width: 13%; height: auto">></button>
          <button type="submit" id="bnForthFast" class="btn btn-default" style="position: absolute; left: 73%; width: 13%; height: auto">>></button>
          <button type="submit" id="bnEnd" class="btn btn-default" style="position: absolute; left: 87%; width: 13%; height: auto">>|</button>
        </div>
      }
    </div>
  }

  <div id="divTimeline" style="position: relative; float: left; width: 100%; height: 64px">
    <div id="divTimelineIcons" style="position: absolute; width: 100%; height: 100%"></div>
    <div id="slider-Minute" style="position: absolute; width: 100%; top: 20px">
      <div id="divMinute" style="position: absolute; width: 100%"></div>
    </div>
  </div>

  <div id="divDrawGameContainer" style="position: relative; float: left; width: auto; margin-bottom: 4px">
    <img id="imgGame" style="position: relative; width: 100%" src="~/Content/Images/stadium/field_full.png" alt="" />
    <div id="drawHeatmap" style="position: absolute; margin-left: 5%; width: 90%; height: 84%; top: 8%"></div>
    <div id="divDrawGame" style="position: absolute; margin-left: 5%; width: 90%; height: 84%; top: 8%"></div>
    @{
      if (Model.bOwnLiveGame) {
        <div id="divLinkTeam" style="position: absolute; top: 0px; left: 5%; width: 30%">
          @Html.ActionLink("Aufstellung", "Team", "Member", null, new { @style = "color:#000aaa;" })
        </div>
        <div id="divLinkTactic" style="position: absolute; top: 20px; left: 5%; width: 30%">
          @Html.ActionLink("Taktik", "Taktik", "Member", null, new { @style = "color:#000aaa;" })
        </div>
      }
    }
    <div id="divLinkHome" style="position: absolute; top: 0px; left: 35%; width: 30%; text-align: center">
      @Html.ActionLink("Home", "Desk", "Member", null, new { @style = "color:#000aaa;" })
    </div>
    <div id="divLinkTactic" style="position: absolute; top: 0px; right: 5%; width: 30%; text-align: right">
      <a href="#" id="aOptions" style="color:#000aaa">Optionen</a>
    </div>
    <div style="position: absolute; width: 175px; left: 5%; bottom: 0px; height: 40px; text-align: left">
      <text id="txtReferee"></text>
    </div>
    @if (Model.game != null) {
      if (!Model.game.data.bFinished) {
        <div id="divCbUpdate" style="position: absolute; bottom: 20px; right: 0px; width: 200px; text-align: right">
          <label style="position: absolute; top: 0px; right: 4px">
            <input type="checkbox" id="cbUpdateStatistic" name="cbUpdateStatistic" value="0" checked>
            Update Statistik
          </label>
        </div>
      }

      if (Model.bAdmin) {
        <div style="position: absolute; width: 30%; left: 35%; bottom: 0px; height: 60px; text-align: center">
          <text id="txtAdminChanceShootOnGoal"></text>
          <text id="txtAdminChanceGoal"></text>
        </div>
      }
    }

    <div id="divPlActionChart" style="left: 0px; width: 100%; height: 8%; min-height: 30px; bottom: 3%; position: absolute; background-color: transparent; display: none"></div>
  </div>

  <div id="divComments" style="width: 100%; height: auto; float: left">
    <table id="tblComments" style="width: 100%; height: auto">
      <tbody style="display: block; border: 1px solid black; height: 132px; overflow-y: scroll"></tbody>
    </table>
  </div>

  <div id="divPlotStatistics" style="width: 100%; height: 300px; float: left"></div>

  <div id="divStat1" style="position: relative; float: left; width: 50%; min-width: 300px; display: block; word-break: break-word">
    <text id="statistikGoals">Tore:</text>
    <text id="statistikSubs">Spielerwechsel:</text>
  </div>
  <div id="divStat2" style="position: relative; float: left; width: 50%; min-width: 300px">
    <text id="statistikCards"></text>
    <text id="playerAction"></text>
  </div>

  @{
    if (Model.bOwnLiveGame) {
      <div id="divTableViewGame" style="position: relative; float: left; width: 100%; margin-top: 10px; margin-bottom: 10px">
        <table id="tableTeamViewGame" cellspacing="0" style="width: 100%" class="display responsive nowrap compact">
          <thead>
            <tr>
              <th>#</th>
              <th>ID</th>
              <th>subst</th>
              <th>Nr</th>
              <th>Name</th>
              <th>Pos.</th>
              <th>Stärke</th>
              <th>Kondi.</th>
              <th>Frische</th>
              <th>Moral</th>
              <th>SP</th>
              <th>Form</th>
              <th>FP</th>
              <th>Note</th>
              <th>Alter</th>
              <th>Tal.</th>
              <th>St. ber.</th>
              <th>C</th>
              <th>Marktwert [€]</th>
              <th>Gehalt [€/a]</th>
              <th>Lz [a]</th>
              <th>Nat.</th>
              <th>susp</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    }

    <div id="chartContainerF" style="position: relative; float: left; height: 300px; width: 100%; margin-top: 10px"></div>
    @*
      <div id="chartContainerM" style="position: relative; float: left; height: 300px; width: 100%"></div>
    *@
  }

  <div style="position: relative; float: left; width: 100%; margin-top: 40px">
    Soundeffekte werden unter der Lizenz CC BY 3.0 (<a>https://creativecommons.org/licenses/by/3.0/</a>) verwendet und können verändert worden sein.<br />
    Autoren sind:
    <ul>
      <li>paulw2k (<a>https://freesound.org/people/paulw2k/sounds/196464/</a>)</li>
    </ul>
  </div>

  <div id="dialogOptions" title="Optionen">
    <b id="txtOptionsHeatmap" style="position: absolute; top: 10px">Heatmap:</b>
    <div id="divOptionsHeatmap" style="position: absolute; top: 4px; left: 100px; width: 140px; height: auto">
      @Html.DropDownListFor(m => m.iHeatmap, Model.ddlHeatmap, new { @Id = "ddlHeatmap", @class = "form-control" })
    </div>
    <b id="txtOptionsShoots" style="position: absolute; top: 50px">Schüsse:</b>
    <div id="divOptionsShoots" style="position: absolute; top: 44px; left: 100px; width: 140px; height: auto">
      @Html.DropDownListFor(m => m.iShoots, Model.ddlShoots, new { @Id = "ddlShoots", @class = "form-control" })
    </div>
    <b id="txtOptionsDuels" style="position: absolute; top: 90px">Zweikämpfe:</b>
    <div id="divOptionsDuels" style="position: absolute; top: 84px; left: 100px; width: 140px; height: auto">
      @Html.DropDownListFor(m => m.iDuels, Model.ddlDuels, new { @Id = "ddlDuels", @class = "form-control" })
    </div>
    <b id="txtOptionsPasses" style="position: absolute; top: 130px">Pässe:</b>
    <div id="divOptionsPasses" style="position: absolute; top: 124px; left: 100px; width: 140px; height: auto">
      @Html.DropDownListFor(m => m.iPasses, Model.ddlPasses, new { @Id = "ddlPasses", @class = "form-control" })
    </div>
    <b id="txtOptionsPos" style="position: absolute; top: 170px">Positionen:</b>
    <div id="divOptionsPos" style="position: absolute; top: 164px; left: 100px; width: 140px; height: auto">
      @Html.DropDownListFor(m => m.iPositions, Model.ddlPositions, new { @Id = "ddlPositions", @class = "form-control" })
    </div>
    <label style="position: absolute; top: 200px; cursor: pointer">
      Chancen:
      <input type="checkbox" name="cbPlAction" style="position: absolute; top: 0px; left: 90px; cursor: pointer" onclick="openDialogChances(this.checked)">
    </label>
    <label style="position: absolute; top: 220px; cursor: pointer">
      Sound:
      @{
        if (Model.bSound) {
          <input type="checkbox" name="cbSound" id="cbSound" style="position: absolute; top: 0px; left: 90px; cursor: pointer" checked="checked">
        } else {
          <input type="checkbox" name="cbSound" id="cbSound" style="position: absolute; top: 0px; left: 90px; cursor: pointer">
        }
      }
    </label>
  </div>

  <div id="dialogAdminOptions" title="Admin Optionen">
    <div style="position: relative; height: 40px">
      <input id="inputAdminGameSpeed" style="position: absolute; width: 25%" type="text" value="250" data-val-required='Das Feld "inputAdminGameSpeed" ist erforderlich.' data-val-number='Das Feld "inputAdminGameSpeed" muss eine Zahl sein.' data-val="true" autocomplete="off">
      <button type="submit" id="bnAdminPlay" class="btn btn-default" style="position: absolute; left: 27%; width: 23%; height: auto">&#9658;</button>
      <button type="submit" id="bnAdminNext" class="btn btn-default" style="position: absolute; left: 52%; width: 23%; height: auto">></button>
      <button type="submit" id="bnAdminNew" class="btn btn-default" style="position: absolute; left: 77%; width: 23%; height: auto">new</button>
    </div>
    <div style="position: relative; height: 30px; width: 100%">
      <label>
        <input id="cbTargetPos" name="cbTargetPos" type="checkbox" value="0">
        Target Pos.
      </label>
    </div>
    <div style="position: relative; height: 30px; width: 100%">
      <label>
        Referee:
        <input id="itAdminReferee" style="width: 40px" type="text" value="1" data-val="true" autocomplete="off">
      </label>
    </div>
    <div style="position: relative; height: 40px">
      <label>
        Nächste Aktion:
        <select id="ddlAdminNextAction">
          <option value="-1">AI</option>
          <option value="0">Schuss</option>
          <option value="1">Pass</option>
          <option value="2">Solo</option>
          <option value="3">Warten</option>
          <option value="4">BS</option>
        </select>
      </label>
    </div>
    <div style="position: relative; width: 240px; height: 40px">
      <select id="ddlAdminSetPosHA">
        <option value="-1">Ball</option>
        <option value="0">H</option>
        <option value="1">A</option>
      </select>
      <select id="ddlAdminSetPosPl">
        <option value="0">1</option>
        <option value="1">2</option>
        <option value="2">3</option>
        <option value="3">4</option>
        <option value="4">5</option>
        <option value="5">6</option>
        <option value="6">7</option>
        <option value="7">8</option>
        <option value="8">9</option>
        <option value="9">10</option>
        <option value="10">11</option>
      </select>
      <input id="inputAdminSetPosX" style="width: 40px" type="text" value="61" data-val="true" autocomplete="off">
      <input id="inputAdminSetPosY" style="width: 40px" type="text" value="0" data-val="true" autocomplete="off">
      <button type="submit" id="bnAdminSetPos" style="width: 40px; height: auto">set</button>
    </div>

    <div id="divTcShootDist" style="position: relative; width: 100%">
      <input type="text" id="itShootDist" readonly style="position: absolute; border: 0; font-weight: bold; text-align: left; background-color: transparent; width: 100%" value="shoot dist">
      <div id="slrAdminShootDist" style="position: absolute; top: 20px; float: left; height: 100%"></div>
    </div>
  </div>
</body>
</html>
